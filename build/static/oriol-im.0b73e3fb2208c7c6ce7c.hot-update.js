webpackHotUpdate("oriol-im",{

/***/ "./packages/mars-theme/src/components/about.js":
/*!*****************************************************!*\
  !*** ./packages/mars-theme/src/components/about.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./list */ \"./packages/mars-theme/src/components/list/index.js\");\n/* harmony import */ var _reading_progress__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../reading-progress */ \"./packages/reading-progress/index.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"6w26y-Post\",styles:\"margin-top:7px;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"1j6xbxy-Post\",styles:\"width:35px !important;margin-top:10px;margin-right:15px;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"wlygie-Post\",styles:\"width:35px !important;margin-top:10px;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref4= false?undefined:{name:\"8lh1ht-Post\",styles:\"margin-top:0;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref5= false?undefined:{name:\"1nekj6w-Post\",styles:\"margin-top:10px;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var Post=(_ref6)=>{var{state,actions,libraries}=_ref6;/**\r\n   * Once the post has loaded in the DOM, prefetch both the\r\n   * home posts and the list component so if the user visits\r\n   * the home page, everything is ready and it loads instantly.\r\n   */Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(()=>{actions.source.fetch(\"/\");_list__WEBPACK_IMPORTED_MODULE_4__[\"default\"].preload();//Prismjs to highlight code snippets\nif(Prism!==undefined){Prism.highlightAll();}},[]);var certifications=[{image:\"https://static.scrum.org/web/badges/badge-psmi.svg\",url:\"https://www.scrum.org/certificates/351942\"},{image:\"https://static.scrum.org/web/badges/badge-pspoi.svg\",url:\"https://www.scrum.org/certificates/445969\"}];var technologies=[{image:\"https://wp.oriol.im/wp-content/uploads/2020/05/node.png\"},{image:\"https://wp.oriol.im/wp-content/uploads/2016/01/salesforce_logo.png\"},{image:\"https://wp.oriol.im/wp-content/uploads/2016/07/Angular_full_color_logo.svg_.png\"},{image:\"https://wp.oriol.im/wp-content/uploads/2020/05/react-1.png\"},{image:\"https://wp.oriol.im/wp-content/uploads/2020/05/csharp.png\"}];var things=[{name:\"Product Design & Management\",icon:\"✍️\"},{name:\"Desarrollo de Software\",icon:\"🛠️\"},{name:\"Administración de sistemas y redes\",icon:\"📡\"},{name:\"Tecnología\",icon:\"💻\"},{name:\"Legislación y protección de datos\",icon:\"⚖️\"},{name:\"Carnavales de Cádiz\",icon:\"💃\"},{name:\"Roadtripear por el mundo\",icon:\"🚗\"},{name:\"Enseñanza y compartir conocimientos\",icon:\"👨‍🎓\"}];var books=[{name:\"The Personal MBA\"},{name:\"Inspired: How to Create Tech Products Customers Love\"},{name:\"Don't make me think\"}];return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_reading_progress__WEBPACK_IMPORTED_MODULE_5__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Content,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Sobre mi\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"20\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"9\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{css:_ref,src:\"https://wp.oriol.im/wp-content/uploads/2016/07/rsz_aaeaaqaaaaaaaalxaaaajda2zdljytzlltiymjetndqyys1hmzi4lwm1mti2nwfiodexma.jpg\",alt:\"Oriol Egea\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{className:\"no-border\",href:\"https://www.linkedin.com/in/oriolegea/\",target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{css:_ref2,src:\"https://wp.oriol.im/wp-content/uploads/2020/05/linkedin-logo-1.png\",alt:\"LinkedIn logo\"})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{className:\"no-border\",href:\"https://www.twitter.com/OriolEgea\",target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{css:_ref3,src:\"https://wp.oriol.im/wp-content/uploads/2020/05/twitter.png\",alt:\"LinkedIn logo\"}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"1\",\"span-s\":\"row\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"10\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{css:_ref4},\"\\xA1Hola! Soy Oriol. Nac\\xED hace \",new Date().getFullYear()-1996,\" a\\xF1os en Terrassa (Espa\\xF1a). Actualmente trabajo en \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://www.vsn-tv.com/\",target:\"_blank\"},\"VSN\"),\" liderando a (y aprendiendo de) un peque\\xF1o, pero muy talentoso, equipo de programadores, que desarrollamos VSNCREA; un producto de tr\\xE1fico, programaci\\xF3n y distribuci\\xF3n de contenidos multimedia.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Siempre me ha apasionado c\\xF3mo el Software puede aportar valor a casi cualquier situaci\\xF3n y entorno. Por ello, siempre que puedo destino tiempo a seguir form\\xE1ndome tanto en desarrollo de Software, como en ideaci\\xF3n, descubrimiento y definici\\xF3n de producto.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"8\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Certificado en\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"8\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{className:\"no-border\",href:certifications[0].url,target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Badge,{src:certifications[0].image}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{className:\"no-border\",href:certifications[1].url,target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Badge,{src:certifications[1].image}))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Trabajo diariamente con\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Slideshow,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Marquee,null,technologies.map((technology,index)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(MarqueeLogo,{key:\"tech-1-\"+index,src:technology.image});}),technologies.map((technology,index)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(MarqueeLogo,{key:\"tech-2-\"+index,src:technology.image});}))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"8\",css:_ref5},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SmallText,null,\"Puedes revisar mi \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://www.linkedin.com/in/oriolegea/\",target:\"_blank\"},\"LinkedIn\"),\", contactarme, o revisar mis publicaciones para ver las tecnolog\\xEDas con las que voy trabajando. Este slider se ofrece s\\xF3lo a modo de resumen ilustrativo.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"8\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Qu\\xE9 me interesa\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chips\"},things.map((item,index)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chip\",key:\"thing-\"+index},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chip-icon\"},item.icon),item.name);}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Libros le\\xEDdos recientemente\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chips\"},books.map((item,index)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chip\",key:\"thing-\"+index},item.name);})))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Mi cronolog\\xEDa\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2020:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2714\\uFE0F Finalizamos la primera versi\\xF3n estable de VSNCREA y la desplegamos en diversos entornos de producci\\xF3n de diversos clientes. Seguimos trabajando en un mont\\xF3n de nuevas funcionalidades nuevas.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2019:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Finalizo el Grado Superior en Desarrollo de Aplicaciones Multiplataforma a distancia.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Obtengo la certificaci\\xF3n PSPO1 de Scrum.org siguiendo un curso de Mplaza.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D\\uD83D\\uDC66 El equipo de desarrollo crece gracias a dos nuevas incorporaciones. Empezamos a remodelar de nuevo el sitio web de VSN.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2018:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC77 Empiezo a liderar un equipo de desarrollo en VSN. Adem\\xE1s de mantener el portal web y todo el trabajo hecho hasta el momento, empezamos a trabajar en VSNCREA, una plataforma de tr\\xE1fico y programaci\\xF3n escalable, multitenant, y altamente customizable y extensible, encargada de la gesti\\xF3n, planificaci\\xF3n y programaci\\xF3n de contenidos tanto en estaciones de TV convencionales, como en medios no lineales.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2708\\uFE0F Viajo por primera vez a Amsterdam, para asistir al IBC, una feria del sector Media & Entertainment.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2696\\uFE0F El Reglamento General de Protecci\\xF3n de datos entra en vigor, y nos adaptamos y formamos para ello.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Obtengo la certificaci\\xF3n PSM1 de Scrum.org siguiendo un curso de Mplaza.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2017:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2714\\uFE0F Finaliza mi implicaci\\xF3n con el proyecto de gesti\\xF3n y venta de contenidos y noticias. Finaliza un periodo en el que aprendo much\\xEDsimo gracias a unos compa\\xF1eros muy profesionales y experimentados.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2708\\uFE0F Viajo a Lisboa por primera vez para asistir al Web Summit.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2708\\uFE0F Viajo a C\\xE1diz por primera vez y conozco a gente estupenda.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2708\\uFE0F Viajo a Bilbao por primera vez junto a gente estupenda.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2016:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC77 Empiezo a trabajar con un equipo de programadores de VSN. Trabajamos en una aplicaci\\xF3n web para la gesti\\xF3n y venta de contenidos y noticias para un organismo de la administraci\\xF3n p\\xFAblica de la provincia de Barcelona.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Me inscribo en \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://teamtreehouse.com/\",target:\"_blank\"},\"Treehouse\"),\". Aprendo y consolido mis conocimientos de Javascript y AngularJS. Durante los sucesivos a\\xF1os me sirve para aprender ReactJS, y realizar alg\\xFAn curso de programaci\\xF3n b\\xE1sica en Swift y Android nativo. Poco despu\\xE9s tambi\\xE9n realizo algunos cursos a trav\\xE9s de Udemy.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC36 La familia crece: Adoptamos a Jeiko, el Spitz Japon\\xE9s m\\xE1s listo y cari\\xF1oso del mundo.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2015:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2714\\uFE0F Finaliza en VSN el desarrollo del nuevo sitio web, y otras aplicaciones internas integradas con Salesforce y otros servicios, relativas a la gesti\\xF3n de tiempo de trabajo y satisfacci\\xF3n del cliente.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Empiezo a cursar el Grado Superior en Desarrollo de Aplicaciones Multiplataforma a distancia.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2014:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Finalizo el Grado Medio en Sistemas Microinform\\xE1ticos y Redes. Aprendo un mont\\xF3n gracias a un profesorado muy comprometido.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC77 Tras seis meses c\\xF3mo becario, empiezo a trabajar c\\xF3mo Web & CRM Developer en \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://www.vsn-tv.com\",target:\"_blank\"},\"VSN\"),\". Encarg\\xE1ndome de remodelar el sitio web corporativo, administrar Salesforce, y gestionar y desarrollar el stack de aplicaciones internas.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2013:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCBB Programo \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://www.frikipoint.com\",target:\"_blank\"},\"FrikiPoint\"),\" junto a un colega, una red social que permite conocer gente cercana a ti de tus mismas aficiones frikis. El proyecto tiene muchos aspectos mejorables, pero acaba resultando una experiencia muy enriquecedora.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2012:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Finalizo la Educaci\\xF3n Secundaria Obligatoria.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Empiezo a cursar el Grado Medio en Sistemas Microinform\\xE1ticos y Redes.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2011:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83C\\uDFAE Colaboro en el desarrollo de una adaptaci\\xF3n del emulador \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://rathena.org/\",target:\"_blank\"},\"rAthena\"),\" para crear un juego de rol. Aprendo aspectos b\\xE1sicos de MySQL, PHP y administraci\\xF3n de servidores gracias al resto de part\\xEDcipes del proyecto, que dedican mucho tiempo a ense\\xF1arme y compartir su conocimiento.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2009:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83C\\uDFF4\\u200D\\u2620\\uFE0F\\u200D Veo Piratas de Silicon Valley por primera vez.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC41\\uFE0F Un colega de mi hermano me ense\\xF1a EyeOS y me hago fan del proyecto.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2006:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDDA5\\uFE0F Mis padres compran un nuevo ordenador. Empiezo a instalar programas que pruebo indiscriminadamente en Softonic.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCE1 El Internet llega a casa gracias al ADSL de Wanadoo. Utilizamos programas P2P para descargar m\\xFAsica, nuestro ratio de descarga es de una canci\\xF3n cada cuatro horas.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCAC Windows Live Messenger se convierte en el Whatsapp de la \\xE9poca (pero sin ser port\\xE1til, y s\\xF3lo por las tardes) para la mayor\\xEDa de compa\\xF1eros de clase.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDD04 Microsoft libera Windows Vista. Me las apa\\xF1o para descargarlo por P2P, y al lograr instalarlo (para disgusto de mis padres) dejo inservible el PC por falta de drivers. Consigo repararlo en alg\\xFAn momento utilizando los discos de restauraci\\xF3n.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2002:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83C\\uDFAE Paso las tardes con mi hermano: Veo la historia de los Zeldas a trav\\xE9s de las partidas de mi hermano, vemos el K3 en casa de nuestra abuela \\uD83D\\uDC75, o salimos a dar vueltas con los patinetes de la \\xE9poca.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"1996:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC76 Nazco a mediados de abril en Terrassa, Barcelona.\")))))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Post));var SmallText=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"e1bq839c0\",label:\"SmallText\"})( false?undefined:{name:\"9c7r58\",styles:\"font-size:10px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxEZXZlbG9wbWVudFxcb3Jpb2wtaW1cXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXGFib3V0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlTMEIiLCJmaWxlIjoiQzpcXERldmVsb3BtZW50XFxvcmlvbC1pbVxccGFja2FnZXNcXG1hcnMtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xcYWJvdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBMaXN0IGZyb20gXCIuL2xpc3RcIjtcclxuaW1wb3J0IFJlYWRpbmdQcm9ncmVzcyBmcm9tIFwiLi4vLi4vLi4vcmVhZGluZy1wcm9ncmVzc1wiO1xyXG5cclxuY29uc3QgUG9zdCA9ICh7IHN0YXRlLCBhY3Rpb25zLCBsaWJyYXJpZXMgfSkgPT4ge1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogT25jZSB0aGUgcG9zdCBoYXMgbG9hZGVkIGluIHRoZSBET00sIHByZWZldGNoIGJvdGggdGhlXHJcbiAgICogaG9tZSBwb3N0cyBhbmQgdGhlIGxpc3QgY29tcG9uZW50IHNvIGlmIHRoZSB1c2VyIHZpc2l0c1xyXG4gICAqIHRoZSBob21lIHBhZ2UsIGV2ZXJ5dGhpbmcgaXMgcmVhZHkgYW5kIGl0IGxvYWRzIGluc3RhbnRseS5cclxuICAgKi9cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgYWN0aW9ucy5zb3VyY2UuZmV0Y2goXCIvXCIpO1xyXG4gICAgTGlzdC5wcmVsb2FkKCk7XHJcblxyXG4gICAgLy9QcmlzbWpzIHRvIGhpZ2hsaWdodCBjb2RlIHNuaXBwZXRzXHJcbiAgICBpZiAoUHJpc20gIT09IHVuZGVmaW5lZCl7XHJcbiAgICAgIFByaXNtLmhpZ2hsaWdodEFsbCgpO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcblxyXG4gIGNvbnN0IGNlcnRpZmljYXRpb25zID0gW1xyXG4gICAge1xyXG4gICAgICBpbWFnZTogXCJodHRwczovL3N0YXRpYy5zY3J1bS5vcmcvd2ViL2JhZGdlcy9iYWRnZS1wc21pLnN2Z1wiLFxyXG4gICAgICB1cmw6IFwiaHR0cHM6Ly93d3cuc2NydW0ub3JnL2NlcnRpZmljYXRlcy8zNTE5NDJcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGltYWdlOiBcImh0dHBzOi8vc3RhdGljLnNjcnVtLm9yZy93ZWIvYmFkZ2VzL2JhZGdlLXBzcG9pLnN2Z1wiLFxyXG4gICAgICB1cmw6IFwiaHR0cHM6Ly93d3cuc2NydW0ub3JnL2NlcnRpZmljYXRlcy80NDU5NjlcIixcclxuICAgIH0sXHJcbiAgXTtcclxuXHJcbiAgY29uc3QgdGVjaG5vbG9naWVzID0gW1xyXG4gICAge1xyXG4gICAgICBpbWFnZTogXCJodHRwczovL3dwLm9yaW9sLmltL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA1L25vZGUucG5nXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpbWFnZTogXCJodHRwczovL3dwLm9yaW9sLmltL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE2LzAxL3NhbGVzZm9yY2VfbG9nby5wbmdcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGltYWdlOiBcImh0dHBzOi8vd3Aub3Jpb2wuaW0vd3AtY29udGVudC91cGxvYWRzLzIwMTYvMDcvQW5ndWxhcl9mdWxsX2NvbG9yX2xvZ28uc3ZnXy5wbmdcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGltYWdlOiBcImh0dHBzOi8vd3Aub3Jpb2wuaW0vd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDUvcmVhY3QtMS5wbmdcIixcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGltYWdlOiBcImh0dHBzOi8vd3Aub3Jpb2wuaW0vd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDUvY3NoYXJwLnBuZ1wiLFxyXG4gICAgfSxcclxuICBdO1xyXG5cclxuXHJcbiAgY29uc3QgdGhpbmdzID0gW1xyXG4gICAgeyBuYW1lOiBcIlByb2R1Y3QgRGVzaWduICYgTWFuYWdlbWVudFwiLCBpY29uOiBcIuKcje+4j1wiIH0sXHJcbiAgICB7IG5hbWU6IFwiRGVzYXJyb2xsbyBkZSBTb2Z0d2FyZVwiLCBpY29uOiBcIvCfm6DvuI9cIiB9LFxyXG4gICAgeyBuYW1lOiBcIkFkbWluaXN0cmFjacOzbiBkZSBzaXN0ZW1hcyB5IHJlZGVzXCIsIGljb246IFwi8J+ToVwiIH0sXHJcbiAgICB7IG5hbWU6IFwiVGVjbm9sb2fDrWFcIiwgaWNvbjogXCLwn5K7XCIgfSxcclxuICAgIHsgbmFtZTogXCJMZWdpc2xhY2nDs24geSBwcm90ZWNjacOzbiBkZSBkYXRvc1wiLCBpY29uOiBcIuKalu+4j1wiIH0sXHJcbiAgICB7IG5hbWU6IFwiQ2FybmF2YWxlcyBkZSBDw6FkaXpcIiwgaWNvbjogXCLwn5KDXCIgfSxcclxuICAgIHsgbmFtZTogXCJSb2FkdHJpcGVhciBwb3IgZWwgbXVuZG9cIiwgaWNvbjogXCLwn5qXXCIgfSxcclxuICAgIHsgbmFtZTogXCJFbnNlw7FhbnphIHkgY29tcGFydGlyIGNvbm9jaW1pZW50b3NcIiwgaWNvbjogXCLwn5Go4oCN8J+Ok1wiIH0sXHJcbiAgXTtcclxuXHJcbiAgY29uc3QgYm9va3MgPSBbXHJcbiAgICB7IG5hbWU6IFwiVGhlIFBlcnNvbmFsIE1CQVwiIH0sXHJcbiAgICB7IG5hbWU6IFwiSW5zcGlyZWQ6IEhvdyB0byBDcmVhdGUgVGVjaCBQcm9kdWN0cyBDdXN0b21lcnMgTG92ZVwiIH0sXHJcbiAgICB7IG5hbWU6IFwiRG9uJ3QgbWFrZSBtZSB0aGlua1wiIH0sXHJcbiAgXVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxSZWFkaW5nUHJvZ3Jlc3MgLz5cclxuICAgIDxDb250YWluZXI+XHJcbiAgICAgIHsvKiBSZW5kZXIgdGhlIGNvbnRlbnQgdXNpbmcgdGhlIEh0bWwyUmVhY3QgY29tcG9uZW50IHNvIHRoZSBIVE1MIGlzIHByb2Nlc3NlZFxyXG4gICAgICAgYnkgdGhlIHByb2Nlc3NvcnMgd2UgaW5jbHVkZWQgaW4gdGhlIGxpYnJhcmllcy5odG1sMnJlYWN0LnByb2Nlc3NvcnMgYXJyYXkuICovfVxyXG4gICAgICA8Q29udGVudD5cclxuICAgICAgICA8aDE+U29icmUgbWk8L2gxPlxyXG4gICAgICAgIDxyLWdyaWQgY29sdW1ucz1cIjIwXCI+XHJcbiAgICAgICAgICAgIDxyLWNlbGwgc3Bhbj1cIjlcIiBzcGFuLXM9XCJyb3dcIj5cclxuICAgICAgICAgICAgICA8aW1nIGNzcz17Y3NzYG1hcmdpbi10b3A6IDdweDtgfSBzcmM9XCJodHRwczovL3dwLm9yaW9sLmltL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE2LzA3L3Jzel9hYWVhYXFhYWFhYWFhYWx4YWFhYWpkYTJ6ZGxqeXR6bGx0aXltamV0bmRxeXlzMWhtemk0bHdtMW10aTJud2Zpb2RleG1hLmpwZ1wiIGFsdD1cIk9yaW9sIEVnZWFcIiAvPlxyXG4gICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cIm5vLWJvcmRlclwiIGhyZWY9XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vb3Jpb2xlZ2VhL1wiIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBjc3M9e2Nzc2B3aWR0aDogMzVweCAhaW1wb3J0YW50OyBtYXJnaW4tdG9wOiAxMHB4OyBtYXJnaW4tcmlnaHQ6IDE1cHg7YH0gc3JjPVwiaHR0cHM6Ly93cC5vcmlvbC5pbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wNS9saW5rZWRpbi1sb2dvLTEucG5nXCIgYWx0PVwiTGlua2VkSW4gbG9nb1wiLz5cclxuICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibm8tYm9yZGVyXCIgaHJlZj1cImh0dHBzOi8vd3d3LnR3aXR0ZXIuY29tL09yaW9sRWdlYVwiIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBjc3M9e2Nzc2B3aWR0aDogMzVweCAhaW1wb3J0YW50OyBtYXJnaW4tdG9wOiAxMHB4O2B9IHNyYz1cImh0dHBzOi8vd3Aub3Jpb2wuaW0vd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDUvdHdpdHRlci5wbmdcIiBhbHQ9XCJMaW5rZWRJbiBsb2dvXCIvPlxyXG4gICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgPC9yLWNlbGw+XHJcbiAgICAgICAgICAgIDxyLWNlbGwgc3Bhbj1cIjFcIiBzcGFuLXM9XCJyb3dcIj48L3ItY2VsbD5cclxuICAgICAgICAgICAgPHItY2VsbCBzcGFuPVwiMTBcIiBzcGFuLXM9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgIDxwIGNzcz17Y3NzYG1hcmdpbi10b3A6IDA7YH0+XHJcbiAgICAgICAgICAgICAgICAgICAgwqFIb2xhISBTb3kgT3Jpb2wuIE5hY8OtIGhhY2Uge25ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKS0xOTk2fSBhw7FvcyBlbiBUZXJyYXNzYSAoRXNwYcOxYSkuIFxyXG4gICAgICAgICAgICAgICAgICAgIEFjdHVhbG1lbnRlIHRyYWJham8gZW4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LnZzbi10di5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VlNOPC9hPiBsaWRlcmFuZG8gYSAoeSBhcHJlbmRpZW5kbyBkZSkgdW4gcGVxdWXDsW8sIHBlcm8gbXV5IHRhbGVudG9zbywgZXF1aXBvIGRlIHByb2dyYW1hZG9yZXMsIHF1ZSBkZXNhcnJvbGxhbW9zIFZTTkNSRUE7IHVuIHByb2R1Y3RvIGRlIHRyw6FmaWNvLCBwcm9ncmFtYWNpw7NuIHkgZGlzdHJpYnVjacOzbiBkZSBjb250ZW5pZG9zIG11bHRpbWVkaWEuXHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICBTaWVtcHJlIG1lIGhhIGFwYXNpb25hZG8gY8OzbW8gZWwgU29mdHdhcmUgcHVlZGUgYXBvcnRhciB2YWxvciBhIGNhc2kgY3VhbHF1aWVyIHNpdHVhY2nDs24geSBlbnRvcm5vLiBQb3IgZWxsbywgc2llbXByZSBxdWUgcHVlZG8gZGVzdGlubyB0aWVtcG8gYSBzZWd1aXIgZm9ybcOhbmRvbWUgdGFudG8gZW4gZGVzYXJyb2xsbyBkZSBTb2Z0d2FyZSwgY29tbyBlbiBpZGVhY2nDs24sIGRlc2N1YnJpbWllbnRvIHkgZGVmaW5pY2nDs24gZGUgcHJvZHVjdG8uXHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDwvci1jZWxsPlxyXG4gICAgICAgIDwvci1ncmlkPlxyXG4gICAgICAgIDxyLWdyaWQgY29sdW1ucz1cIjhcIj5cclxuICAgICAgICAgICAgPHItY2VsbCBzcGFuPVwiNFwiIHNwYW4tcz1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgPGgxPkNlcnRpZmljYWRvIGVuPC9oMT5cclxuICAgICAgICAgICAgICAgIDxyLWdyaWQgY29sdW1ucz1cIjhcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ci1jZWxsIHNwYW49XCI0XCIgc3Bhbi1zPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJuby1ib3JkZXJcIiBocmVmPXtjZXJ0aWZpY2F0aW9uc1swXS51cmx9IHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QmFkZ2Ugc3JjPXtjZXJ0aWZpY2F0aW9uc1swXS5pbWFnZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L3ItY2VsbD5cclxuICAgICAgICAgICAgICAgICAgICA8ci1jZWxsIHNwYW49XCI0XCIgc3Bhbi1zPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJuby1ib3JkZXJcIiBocmVmPXtjZXJ0aWZpY2F0aW9uc1sxXS51cmx9IHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QmFkZ2Ugc3JjPXtjZXJ0aWZpY2F0aW9uc1sxXS5pbWFnZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L3ItY2VsbD5cclxuICAgICAgICAgICAgICAgIDwvci1ncmlkPlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvci1jZWxsPlxyXG4gICAgICAgICAgICA8ci1jZWxsIHNwYW49XCI0XCIgc3Bhbi1zPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICA8aDE+VHJhYmFqbyBkaWFyaWFtZW50ZSBjb248L2gxPlxyXG4gICAgICAgICAgICAgICAgICA8U2xpZGVzaG93PlxyXG4gICAgICAgICAgICAgICAgICAgIDxNYXJxdWVlPlxyXG4gICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZWNobm9sb2dpZXMubWFwKCh0ZWNobm9sb2d5LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8TWFycXVlZUxvZ28ga2V5PXtcInRlY2gtMS1cIitpbmRleH0gc3JjPXt0ZWNobm9sb2d5LmltYWdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxue1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGVjaG5vbG9naWVzLm1hcCgodGVjaG5vbG9neSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE1hcnF1ZWVMb2dvIGtleT17XCJ0ZWNoLTItXCIraW5kZXh9IHNyYz17dGVjaG5vbG9neS5pbWFnZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8L01hcnF1ZWU+XHJcbiAgICAgICAgICAgICAgICAgIDwvU2xpZGVzaG93PlxyXG4gICAgICAgICAgICA8L3ItY2VsbD5cclxuICAgICAgICA8L3ItZ3JpZD5cclxuICAgICAgICA8ci1ncmlkIGNvbHVtbnM9XCI4XCIgY3NzPXtjc3NgbWFyZ2luLXRvcDogMTBweDtgfT5cclxuICAgICAgICAgICAgPHItY2VsbCBzcGFuPVwiNFwiIHNwYW4tcz1cInJvd1wiPjwvci1jZWxsPlxyXG4gICAgICAgICAgICA8ci1jZWxsIHNwYW49XCI0XCIgc3Bhbi1zPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgPFNtYWxsVGV4dD5QdWVkZXMgcmV2aXNhciBtaSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL29yaW9sZWdlYS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rZWRJbjwvYT4sIGNvbnRhY3Rhcm1lLCBvIHJldmlzYXIgbWlzIHB1YmxpY2FjaW9uZXMgcGFyYSB2ZXIgbGFzIHRlY25vbG9nw61hcyBjb24gbGFzIHF1ZSB2b3kgdHJhYmFqYW5kby4gRXN0ZSBzbGlkZXIgc2Ugb2ZyZWNlIHPDs2xvIGEgbW9kbyBkZSByZXN1bWVuIGlsdXN0cmF0aXZvLjwvU21hbGxUZXh0PiBcclxuICAgICAgICAgICAgPC9yLWNlbGw+XHJcbiAgICAgICAgPC9yLWdyaWQ+XHJcblxyXG4gICAgICAgIDxyLWdyaWQgY29sdW1ucz1cIjhcIj5cclxuICAgICAgICAgICAgPHItY2VsbCBzcGFuPVwiNFwiIHNwYW4tcz1cInJvd1wiPlxyXG5cclxuICAgICAgICAgICAgPGgxPlF1w6kgbWUgaW50ZXJlc2E8L2gxPlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZC1jaGlwc1wiPlxyXG4gICAgICAgICAgICAgIHt0aGluZ3MubWFwKChpdGVtLCBpbmRleCk9PntcclxuICAgICAgICAgICAgICAgIHJldHVybihcclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZC1jaGlwXCIga2V5PXtcInRoaW5nLVwiK2luZGV4fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1kLWNoaXAtaWNvblwiPntpdGVtLmljb259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAge2l0ZW0ubmFtZX1cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIH0pfVxyXG5cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPC9yLWNlbGw+XHJcbiAgICAgICAgICAgIDxyLWNlbGwgc3Bhbj1cIjRcIiBzcGFuLXM9XCJyb3dcIj5cclxuICAgICAgICAgICAgPGgxPkxpYnJvcyBsZcOtZG9zIHJlY2llbnRlbWVudGU8L2gxPlxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1kLWNoaXBzXCI+XHJcbiAgICAgICAgICAgICAgICB7Ym9va3MubWFwKChpdGVtLCBpbmRleCk9PntcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuKFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWQtY2hpcFwiIGtleT17XCJ0aGluZy1cIitpbmRleH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5uYW1lfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvci1jZWxsPlxyXG4gICAgICAgIDwvci1ncmlkPlxyXG5cclxuICAgICAgICBcclxuICAgICAgICA8aDE+TWkgY3Jvbm9sb2fDrWE8L2gxPlxyXG4gICAgICAgIDx1bD5cclxuICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgPHN0cm9uZz4yMDIwOjwvc3Ryb25nPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgPGxpPuKclO+4jyBGaW5hbGl6YW1vcyBsYSBwcmltZXJhIHZlcnNpw7NuIGVzdGFibGUgZGUgVlNOQ1JFQSB5IGxhIGRlc3BsZWdhbW9zIGVuIGRpdmVyc29zIGVudG9ybm9zIGRlIHByb2R1Y2Npw7NuIGRlIGRpdmVyc29zIGNsaWVudGVzLiBTZWd1aW1vcyB0cmFiYWphbmRvIGVuIHVuIG1vbnTDs24gZGUgbnVldmFzIGZ1bmNpb25hbGlkYWRlcyBudWV2YXMuPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+MjAxOTo8L3N0cm9uZz5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5OcIEZpbmFsaXpvIGVsIEdyYWRvIFN1cGVyaW9yIGVuIERlc2Fycm9sbG8gZGUgQXBsaWNhY2lvbmVzIE11bHRpcGxhdGFmb3JtYSBhIGRpc3RhbmNpYS48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5OcIE9idGVuZ28gbGEgY2VydGlmaWNhY2nDs24gUFNQTzEgZGUgU2NydW0ub3JnIHNpZ3VpZW5kbyB1biBjdXJzbyBkZSBNcGxhemEuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+RqeKAjfCfkanigI3wn5Gn4oCN8J+RpiBFbCBlcXVpcG8gZGUgZGVzYXJyb2xsbyBjcmVjZSBncmFjaWFzIGEgZG9zIG51ZXZhcyBpbmNvcnBvcmFjaW9uZXMuIEVtcGV6YW1vcyBhIHJlbW9kZWxhciBkZSBudWV2byBlbCBzaXRpbyB3ZWIgZGUgVlNOLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICA8c3Ryb25nPjIwMTg6PC9zdHJvbmc+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICA8bGk+8J+RtyBFbXBpZXpvIGEgbGlkZXJhciB1biBlcXVpcG8gZGUgZGVzYXJyb2xsbyBlbiBWU04uIEFkZW3DoXMgZGUgbWFudGVuZXIgZWwgcG9ydGFsIHdlYiB5IHRvZG8gZWwgdHJhYmFqbyBoZWNobyBoYXN0YSBlbCBtb21lbnRvLCBlbXBlemFtb3MgYSB0cmFiYWphciBlbiBWU05DUkVBLCB1bmEgcGxhdGFmb3JtYSBkZSB0csOhZmljbyB5IHByb2dyYW1hY2nDs24gZXNjYWxhYmxlLCBtdWx0aXRlbmFudCwgeSBhbHRhbWVudGUgY3VzdG9taXphYmxlIHkgZXh0ZW5zaWJsZSwgZW5jYXJnYWRhIGRlIGxhIGdlc3Rpw7NuLCBwbGFuaWZpY2FjacOzbiB5IHByb2dyYW1hY2nDs24gZGUgY29udGVuaWRvcyB0YW50byBlbiBlc3RhY2lvbmVzIGRlIFRWIGNvbnZlbmNpb25hbGVzLCBjb21vIGVuIG1lZGlvcyBubyBsaW5lYWxlcy48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7inIjvuI8gVmlham8gcG9yIHByaW1lcmEgdmV6IGEgQW1zdGVyZGFtLCBwYXJhIGFzaXN0aXIgYWwgSUJDLCB1bmEgZmVyaWEgZGVsIHNlY3RvciBNZWRpYSAmIEVudGVydGFpbm1lbnQuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+4pqW77iPIEVsIFJlZ2xhbWVudG8gR2VuZXJhbCBkZSBQcm90ZWNjacOzbiBkZSBkYXRvcyBlbnRyYSBlbiB2aWdvciwgeSBub3MgYWRhcHRhbW9zIHkgZm9ybWFtb3MgcGFyYSBlbGxvLjwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPvCfk5wgT2J0ZW5nbyBsYSBjZXJ0aWZpY2FjacOzbiBQU00xIGRlIFNjcnVtLm9yZyBzaWd1aWVuZG8gdW4gY3Vyc28gZGUgTXBsYXphLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICA8c3Ryb25nPjIwMTc6PC9zdHJvbmc+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICA8bGk+4pyU77iPIEZpbmFsaXphIG1pIGltcGxpY2FjacOzbiBjb24gZWwgcHJveWVjdG8gZGUgZ2VzdGnDs24geSB2ZW50YSBkZSBjb250ZW5pZG9zIHkgbm90aWNpYXMuIEZpbmFsaXphIHVuIHBlcmlvZG8gZW4gZWwgcXVlIGFwcmVuZG8gbXVjaMOtc2ltbyBncmFjaWFzIGEgdW5vcyBjb21wYcOxZXJvcyBtdXkgcHJvZmVzaW9uYWxlcyB5IGV4cGVyaW1lbnRhZG9zLjwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPuKciO+4jyBWaWFqbyBhIExpc2JvYSBwb3IgcHJpbWVyYSB2ZXogcGFyYSBhc2lzdGlyIGFsIFdlYiBTdW1taXQuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+4pyI77iPIFZpYWpvIGEgQ8OhZGl6IHBvciBwcmltZXJhIHZleiB5IGNvbm96Y28gYSBnZW50ZSBlc3R1cGVuZGEuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+4pyI77iPIFZpYWpvIGEgQmlsYmFvIHBvciBwcmltZXJhIHZleiBqdW50byBhIGdlbnRlIGVzdHVwZW5kYS48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgPHN0cm9uZz4yMDE2Ojwvc3Ryb25nPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgPGxpPvCfkbcgRW1waWV6byBhIHRyYWJhamFyIGNvbiB1biBlcXVpcG8gZGUgcHJvZ3JhbWFkb3JlcyBkZSBWU04uIFRyYWJhamFtb3MgZW4gdW5hIGFwbGljYWNpw7NuIHdlYiBwYXJhIGxhIGdlc3Rpw7NuIHkgdmVudGEgZGUgY29udGVuaWRvcyB5IG5vdGljaWFzIHBhcmEgdW4gb3JnYW5pc21vIGRlIGxhIGFkbWluaXN0cmFjacOzbiBww7pibGljYSBkZSBsYSBwcm92aW5jaWEgZGUgQmFyY2Vsb25hLjwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPvCfkajigI3wn46TIE1lIGluc2NyaWJvIGVuIDxhIGhyZWY9XCJodHRwczovL3RlYW10cmVlaG91c2UuY29tL1wiIHRhcmdldD1cIl9ibGFua1wiPlRyZWVob3VzZTwvYT4uIEFwcmVuZG8geSBjb25zb2xpZG8gbWlzIGNvbm9jaW1pZW50b3MgZGUgSmF2YXNjcmlwdCB5IEFuZ3VsYXJKUy4gRHVyYW50ZSBsb3Mgc3VjZXNpdm9zIGHDsW9zIG1lIHNpcnZlIHBhcmEgYXByZW5kZXIgUmVhY3RKUywgeSByZWFsaXphciBhbGfDum4gY3Vyc28gZGUgcHJvZ3JhbWFjacOzbiBiw6FzaWNhIGVuIFN3aWZ0IHkgQW5kcm9pZCBuYXRpdm8uIFBvY28gZGVzcHXDqXMgdGFtYmnDqW4gcmVhbGl6byBhbGd1bm9zIGN1cnNvcyBhIHRyYXbDqXMgZGUgVWRlbXkuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+QtiBMYSBmYW1pbGlhIGNyZWNlOiBBZG9wdGFtb3MgYSBKZWlrbywgZWwgU3BpdHogSmFwb27DqXMgbcOhcyBsaXN0byB5IGNhcmnDsW9zbyBkZWwgbXVuZG8uPC9saT4gIFxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgPHN0cm9uZz4yMDE1Ojwvc3Ryb25nPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgPGxpPuKclO+4jyBGaW5hbGl6YSBlbiBWU04gZWwgZGVzYXJyb2xsbyBkZWwgbnVldm8gc2l0aW8gd2ViLCB5IG90cmFzIGFwbGljYWNpb25lcyBpbnRlcm5hcyBpbnRlZ3JhZGFzIGNvbiBTYWxlc2ZvcmNlIHkgb3Ryb3Mgc2VydmljaW9zLCByZWxhdGl2YXMgYSBsYSBnZXN0acOzbiBkZSB0aWVtcG8gZGUgdHJhYmFqbyB5IHNhdGlzZmFjY2nDs24gZGVsIGNsaWVudGUuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+RqOKAjfCfjpMgRW1waWV6byBhIGN1cnNhciBlbCBHcmFkbyBTdXBlcmlvciBlbiBEZXNhcnJvbGxvIGRlIEFwbGljYWNpb25lcyBNdWx0aXBsYXRhZm9ybWEgYSBkaXN0YW5jaWEuPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+MjAxNDo8L3N0cm9uZz5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5OcIEZpbmFsaXpvIGVsIEdyYWRvIE1lZGlvIGVuIFNpc3RlbWFzIE1pY3JvaW5mb3Jtw6F0aWNvcyB5IFJlZGVzLiBBcHJlbmRvIHVuIG1vbnTDs24gZ3JhY2lhcyBhIHVuIHByb2Zlc29yYWRvIG11eSBjb21wcm9tZXRpZG8uPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+RtyBUcmFzIHNlaXMgbWVzZXMgY8OzbW8gYmVjYXJpbywgZW1waWV6byBhIHRyYWJhamFyIGPDs21vIFdlYiAmIENSTSBEZXZlbG9wZXIgZW4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LnZzbi10di5jb21cIiB0YXJnZXQ9XCJfYmxhbmtcIj5WU048L2E+LiBFbmNhcmfDoW5kb21lIGRlIHJlbW9kZWxhciBlbCBzaXRpbyB3ZWIgY29ycG9yYXRpdm8sIGFkbWluaXN0cmFyIFNhbGVzZm9yY2UsIHkgZ2VzdGlvbmFyIHkgZGVzYXJyb2xsYXIgZWwgc3RhY2sgZGUgYXBsaWNhY2lvbmVzIGludGVybmFzLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICA8c3Ryb25nPjIwMTM6PC9zdHJvbmc+IFxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgPGxpPvCfkrsgUHJvZ3JhbW8gPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZyaWtpcG9pbnQuY29tXCIgdGFyZ2V0PVwiX2JsYW5rXCI+RnJpa2lQb2ludDwvYT4ganVudG8gYSB1biBjb2xlZ2EsIHVuYSByZWQgc29jaWFsIHF1ZSBwZXJtaXRlIGNvbm9jZXIgZ2VudGUgY2VyY2FuYSBhIHRpIGRlIHR1cyBtaXNtYXMgYWZpY2lvbmVzIGZyaWtpcy4gRWwgcHJveWVjdG8gdGllbmUgbXVjaG9zIGFzcGVjdG9zIG1lam9yYWJsZXMsIHBlcm8gYWNhYmEgcmVzdWx0YW5kbyB1bmEgZXhwZXJpZW5jaWEgbXV5IGVucmlxdWVjZWRvcmEuPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+MjAxMjo8L3N0cm9uZz4gXHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICA8bGk+8J+TnCBGaW5hbGl6byBsYSBFZHVjYWNpw7NuIFNlY3VuZGFyaWEgT2JsaWdhdG9yaWEuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+RqOKAjfCfjpMgRW1waWV6byBhIGN1cnNhciBlbCBHcmFkbyBNZWRpbyBlbiBTaXN0ZW1hcyBNaWNyb2luZm9ybcOhdGljb3MgeSBSZWRlcy48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgPHN0cm9uZz4yMDExOjwvc3Ryb25nPiBcclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7wn46uIENvbGFib3JvIGVuIGVsIGRlc2Fycm9sbG8gZGUgdW5hIGFkYXB0YWNpw7NuIGRlbCBlbXVsYWRvciA8YSBocmVmPVwiaHR0cHM6Ly9yYXRoZW5hLm9yZy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5yQXRoZW5hPC9hPiBwYXJhIGNyZWFyIHVuIGp1ZWdvIGRlIHJvbC4gQXByZW5kbyBhc3BlY3RvcyBiw6FzaWNvcyBkZSBNeVNRTCwgUEhQIHkgYWRtaW5pc3RyYWNpw7NuIGRlIHNlcnZpZG9yZXMgZ3JhY2lhcyBhbCByZXN0byBkZSBwYXJ0w61jaXBlcyBkZWwgcHJveWVjdG8sIHF1ZSBkZWRpY2FuIG11Y2hvIHRpZW1wbyBhIGVuc2XDsWFybWUgeSBjb21wYXJ0aXIgc3UgY29ub2NpbWllbnRvLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpPjxzdHJvbmc+MjAwOTo8L3N0cm9uZz4gXHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICA8bGk+8J+PtOKAjeKYoO+4j+KAjSBWZW8gUGlyYXRhcyBkZSBTaWxpY29uIFZhbGxleSBwb3IgcHJpbWVyYSB2ZXouPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+Rge+4jyBVbiBjb2xlZ2EgZGUgbWkgaGVybWFubyBtZSBlbnNlw7FhIEV5ZU9TIHkgbWUgaGFnbyBmYW4gZGVsIHByb3llY3RvLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICA8c3Ryb25nPjIwMDY6PC9zdHJvbmc+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICA8bGk+8J+Wpe+4jyBNaXMgcGFkcmVzIGNvbXByYW4gdW4gbnVldm8gb3JkZW5hZG9yLiBFbXBpZXpvIGEgaW5zdGFsYXIgcHJvZ3JhbWFzIHF1ZSBwcnVlYm8gaW5kaXNjcmltaW5hZGFtZW50ZSBlbiBTb2Z0b25pYy48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5OhIEVsIEludGVybmV0IGxsZWdhIGEgY2FzYSBncmFjaWFzIGFsIEFEU0wgZGUgV2FuYWRvby4gVXRpbGl6YW1vcyBwcm9ncmFtYXMgUDJQIHBhcmEgZGVzY2FyZ2FyIG3DunNpY2EsIG51ZXN0cm8gcmF0aW8gZGUgZGVzY2FyZ2EgZXMgZGUgdW5hIGNhbmNpw7NuIGNhZGEgY3VhdHJvIGhvcmFzLjwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPvCfkqwgV2luZG93cyBMaXZlIE1lc3NlbmdlciBzZSBjb252aWVydGUgZW4gZWwgV2hhdHNhcHAgZGUgbGEgw6lwb2NhIChwZXJvIHNpbiBzZXIgcG9ydMOhdGlsLCB5IHPDs2xvIHBvciBsYXMgdGFyZGVzKSBwYXJhIGxhIG1heW9yw61hIGRlIGNvbXBhw7Flcm9zIGRlIGNsYXNlLjwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPvCflIQgTWljcm9zb2Z0IGxpYmVyYSBXaW5kb3dzIFZpc3RhLiBNZSBsYXMgYXBhw7FvIHBhcmEgZGVzY2FyZ2FybG8gcG9yIFAyUCwgeSBhbCBsb2dyYXIgaW5zdGFsYXJsbyAocGFyYSBkaXNndXN0byBkZSBtaXMgcGFkcmVzKSBkZWpvIGluc2VydmlibGUgZWwgUEMgcG9yIGZhbHRhIGRlIGRyaXZlcnMuIENvbnNpZ28gcmVwYXJhcmxvIGVuIGFsZ8O6biBtb21lbnRvIHV0aWxpemFuZG8gbG9zIGRpc2NvcyBkZSByZXN0YXVyYWNpw7NuLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICA8c3Ryb25nPjIwMDI6PC9zdHJvbmc+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICA8bGk+8J+OriBQYXNvIGxhcyB0YXJkZXMgY29uIG1pIGhlcm1hbm86IFZlbyBsYSBoaXN0b3JpYSBkZSBsb3MgWmVsZGFzIGEgdHJhdsOpcyBkZSBsYXMgcGFydGlkYXMgZGUgbWkgaGVybWFubywgdmVtb3MgZWwgSzMgZW4gY2FzYSBkZSBudWVzdHJhIGFidWVsYSDwn5G1LCBvIHNhbGltb3MgYSBkYXIgdnVlbHRhcyBjb24gbG9zIHBhdGluZXRlcyBkZSBsYSDDqXBvY2EuPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+PHN0cm9uZz4xOTk2Ojwvc3Ryb25nPiBcclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5G2IE5hemNvIGEgbWVkaWFkb3MgZGUgYWJyaWwgZW4gVGVycmFzc2EsIEJhcmNlbG9uYS48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICA8L3VsPlxyXG4gICAgICA8L0NvbnRlbnQ+XHJcbiAgICA8L0NvbnRhaW5lcj5cclxuICAgIDwvPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFBvc3QpO1xyXG5cclxuY29uc3QgU21hbGxUZXh0ID0gc3R5bGVkLnBgXHJcbiAgZm9udC1zaXplOiAxMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICB3aWR0aDogODAwcHg7XHJcbiAgbWFyZ2luOiAwO1xyXG4gIHBhZGRpbmc6IDI0cHg7XHJcbmA7XHJcblxyXG5jb25zdCBCYWRnZSA9IHN0eWxlZC5pbWdgXHJcbiAgICBtYXgtd2lkdGg6IDUwJTtcclxuICAgIG1hcmdpbi1sZWZ0OiAyNSUgIWltcG9ydGFudDtcclxuYDtcclxuXHJcbmNvbnN0IFNsaWRlc2hvdyAgPSBzdHlsZWQuZGl2YFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gIG1heC13aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDExMHB4O1xyXG4gIG1heC1oZWlnaHQ6IDExMHB4O1xyXG5gO1xyXG5cclxuY29uc3QgTWFycXVlZSA9IHN0eWxlZC5kaXZgXHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIGxlZnQ6IDA7XHJcbiAgdG9wOiAwO1xyXG4gIGhlaWdodDogMTAwJTtcclxuICB3aWR0aDogNTAwMHB4O1xyXG4gIG1heC13aWR0aDogNTAwMHB4O1xyXG4gIGFuaW1hdGlvbjogc2xpZGVzaG93IDEwcyBsaW5lYXIgaW5maW5pdGU7XHJcbmA7XHJcblxyXG5jb25zdCBNYXJxdWVlTG9nbyA9IHN0eWxlZC5pbWdgXHJcbiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDtcclxuICAgIG1heC13aWR0aDogMTAwcHg7XHJcbiAgICB3aWR0aDogMTAwcHg7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IGNhbGMoMjBweCkgIWltcG9ydGFudDtcclxuYDtcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNvbXBvbmVudCBpcyB0aGUgcGFyZW50IG9mIHRoZSBgY29udGVudC5yZW5kZXJlZGAgSFRNTC4gV2UgY2FuIHVzZSBuZXN0ZWRcclxuICogc2VsZWN0b3JzIHRvIHN0eWxlIHRoYXQgSFRNTC5cclxuICovXHJcbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2YFxyXG4gIGNvbG9yOiByZ2JhKDEyLCAxNywgNDMsIDAuOCk7XHJcbiAgd29yZC1icmVhazogYnJlYWstd29yZDtcclxuXHJcbiAgKiB7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG5cclxuICBwIHtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjZlbTtcclxuICB9XHJcblxyXG4gIGltZyB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xyXG4gICAgb2JqZWN0LXBvc2l0aW9uOiBjZW50ZXI7XHJcbiAgfVxyXG5cclxuICBmaWd1cmUge1xyXG4gICAgbWFyZ2luOiAyNHB4IGF1dG87XHJcbiAgICAvKiBuZXh0IGxpbmUgb3ZlcnJpZGVzIGFuIGlubGluZSBzdHlsZSBvZiB0aGUgZmlndXJlIGVsZW1lbnQuICovXHJcbiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG5cclxuICAgIGZpZ2NhcHRpb24ge1xyXG4gICAgICBmb250LXNpemU6IDAuN2VtO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWZyYW1lIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgbWFyZ2luOiBhdXRvO1xyXG4gIH1cclxuXHJcbiAgYmxvY2txdW90ZSB7XHJcbiAgICBtYXJnaW46IDE2cHggMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTtcclxuICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQgcmdiYSgxMiwgMTcsIDQzKTtcclxuICAgIHBhZGRpbmc6IDRweCAxNnB4O1xyXG4gIH1cclxuXHJcbiAgYSB7XHJcbiAgICBjb2xvcjogcmdiKDIzOSwgMTkwLCAwKSAhaW1wb3J0YW50O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgfVxyXG5cclxuICBhOmhvdmVye1xyXG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHJnYigyMzksIDE5MCwgMCk7XHJcbiAgfVxyXG5cclxuICBhLm5vLWJvcmRlcntcclxuICAgIGJvcmRlci1ib3R0b206IG5vbmUgIWltcG9ydGFudDtcclxuICB9XHJcblxyXG4gIC8qIElucHV0IGZpZWxkcyBzdHlsZXMgKi9cclxuXHJcbiAgaW5wdXRbdHlwZT1cInRleHRcIl0sXHJcbiAgaW5wdXRbdHlwZT1cImVtYWlsXCJdLFxyXG4gIGlucHV0W3R5cGU9XCJ1cmxcIl0sXHJcbiAgaW5wdXRbdHlwZT1cInRlbFwiXSxcclxuICBpbnB1dFt0eXBlPVwibnVtYmVyXCJdLFxyXG4gIGlucHV0W3R5cGU9XCJkYXRlXCJdLFxyXG4gIHRleHRhcmVhLFxyXG4gIHNlbGVjdCB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBhZGRpbmc6IDZweCAxMnB4O1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XHJcbiAgICBjb2xvcjogIzQ5NTA1NztcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NlZDRkYTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIG91dGxpbmUtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgdHJhbnNpdGlvbjogb3V0bGluZS1jb2xvciAwLjE1cyBlYXNlLWluLW91dCwgYm94LXNoYWRvdyAwLjE1cyBlYXNlLWluLW91dDtcclxuICAgIG1hcmdpbjogOHB4IDAgNHB4IDA7XHJcblxyXG4gICAgJjpmb2N1cyB7XHJcbiAgICAgIG91dGxpbmUtY29sb3I6ICMxZjM4YzU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAtbXMtdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XHJcbiAgICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMWYzOGM1O1xyXG4gICAgcGFkZGluZzogMTJweCAzNnB4O1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuNDI4NTcxNDM7XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMxZjM4YzU7XHJcbiAgfVxyXG5cclxuICAvKiBXb3JkUHJlc3MgQ29yZSBBbGlnbiBDbGFzc2VzICovXHJcblxyXG4gIEBtZWRpYSAobWluLXdpZHRoOiA0MjBweCkge1xyXG4gICAgaW1nLmFsaWduY2VudGVyLFxyXG4gICAgaW1nLmFsaWdubGVmdCxcclxuICAgIGltZy5hbGlnbnJpZ2h0IHtcclxuICAgICAgd2lkdGg6IGF1dG87XHJcbiAgICB9XHJcblxyXG4gICAgLmFsaWduY2VudGVyIHtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XHJcbiAgICB9XHJcblxyXG4gICAgLmFsaWducmlnaHQge1xyXG4gICAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAyNHB4O1xyXG4gICAgfVxyXG5cclxuICAgIC5hbGlnbmxlZnQge1xyXG4gICAgICBmbG9hdDogbGVmdDtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAyNHB4O1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c1\",label:\"Container\"})( false?undefined:{name:\"ozz26u\",styles:\"width:800px;margin:0;padding:24px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Badge=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e1bq839c2\",label:\"Badge\"})( false?undefined:{name:\"uqgv2k\",styles:\"max-width:50%;margin-left:25% !important;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Slideshow=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c3\",label:\"Slideshow\"})( false?undefined:{name:\"1l90r1l\",styles:\"position:relative;overflow:hidden;max-width:100%;height:110px;max-height:110px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Marquee=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c4\",label:\"Marquee\"})( false?undefined:{name:\"fdcq6g\",styles:\"position:absolute;left:0;top:0;height:100%;width:5000px;max-width:5000px;animation:slideshow 10s linear infinite;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var MarqueeLogo=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e1bq839c5\",label:\"MarqueeLogo\"})( false?undefined:{name:\"o30h1c\",styles:\"display:inline !important;max-width:100px;width:100px;margin-right:calc(20px) !important;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/**\r\n * This component is the parent of the `content.rendered` HTML. We can use nested\r\n * selectors to style that HTML.\r\n */var Content=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c6\",label:\"Content\"})( false?undefined:{name:\"nd82qj\",styles:\"color:rgba(12,17,43,0.8);word-break:break-word;*{max-width:100%;}p{line-height:1.6em;}img{width:100%;object-fit:cover;object-position:center;}figure{margin:24px auto;width:100% !important;figcaption{font-size:0.7em;}}iframe{display:block;margin:auto;}blockquote{margin:16px 0;background-color:rgba(0,0,0,0.1);border-left:4px solid rgba(12,17,43);padding:4px 16px;}a{color:rgb(239,190,0) !important;font-weight:bold;text-decoration:none;}a:hover{border-bottom:2px solid rgb(239,190,0);}a.no-border{border-bottom:none !important;}input[type=\\\"text\\\"],input[type=\\\"email\\\"],input[type=\\\"url\\\"],input[type=\\\"tel\\\"],input[type=\\\"number\\\"],input[type=\\\"date\\\"],textarea,select{display:block;padding:6px 12px;font-size:16px;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:4px;outline-color:transparent;transition:outline-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;margin:8px 0 4px 0;&:focus{outline-color:#1f38c5;}}input[type=\\\"submit\\\"]{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid #1f38c5;padding:12px 36px;font-size:14px;line-height:1.42857143;border-radius:4px;color:#fff;background-color:#1f38c5;}@media (min-width:420px){img.aligncenter,img.alignleft,img.alignright{width:auto;}.aligncenter{display:block;margin-left:auto;margin-right:auto;}.alignright{float:right;margin-left:24px;}.alignleft{float:left;margin-right:24px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/about.js\n");

/***/ })

})