webpackHotUpdate("oriol-im",{

/***/ "./packages/mars-theme/src/components/about.js":
/*!*****************************************************!*\
  !*** ./packages/mars-theme/src/components/about.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./list */ \"./packages/mars-theme/src/components/list/index.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var Post=(_ref)=>{var{state,actions,libraries}=_ref;/**\r\n   * Once the post has loaded in the DOM, prefetch both the\r\n   * home posts and the list component so if the user visits\r\n   * the home page, everything is ready and it loads instantly.\r\n   */Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(()=>{actions.source.fetch(\"/\");_list__WEBPACK_IMPORTED_MODULE_3__[\"default\"].preload();//Prismjs to highlight code snippets\nif(Prism!==undefined){Prism.highlightAll();}},[]);var certifications=[{image:\"https://static.scrum.org/web/badges/badge-psmi.svg\",url:\"https://www.scrum.org/certificates/351942\"},{image:\"https://static.scrum.org/web/badges/badge-pspoi.svg\",url:\"https://www.scrum.org/certificates/445969\"}];var technologies=[{image:\"https://www.oriol.im/wp-content/uploads/2020/05/node.png\"},{image:\"https://www.oriol.im/wp-content/uploads/2016/01/salesforce_logo.png\"},{image:\"https://www.oriol.im/wp-content/uploads/2016/07/Angular_full_color_logo.svg_.png\"},{image:\"https://www.oriol.im/wp-content/uploads/2020/05/react-1.png\"},{image:\"https://www.oriol.im/wp-content/uploads/2020/05/csharp.png\"}];var rand=(min,max)=>{var offset=min;var range=max-min+1;var randomNumber=Math.floor(Math.random()*range)+offset;return randomNumber;};return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Content,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"h1\",null,\"Sobre mi\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-grid\",{columns:\"8\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-cell\",{span:\"3\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"img\",{src:\"https://www.oriol.im/wp-content/uploads/2016/07/rsz_aaeaaqaaaaaaaalxaaaajda2zdljytzlltiymjetndqyys1hmzi4lwm1mti2nwfiodexma.jpg\",alt:\"Oriol Egea\"})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-cell\",{span:\"5\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"p\",null,\"\\xA1Hola! Soy Oriol. Nac\\xED hace \",new Date().getFullYear()-1996,\" a\\xF1os en Terrassa (Espa\\xF1a). Actualmente trabajo en \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"a\",{href:\"https://www.vsn-tv.com/\",target:\"_blank\"},\"VSN\"),\" liderando a (y aprendiendo de) un peque\\xF1o, pero muy talentoso, equipo de programadores, que desarrollamos VSNCREA; un producto de tr\\xE1fico, programaci\\xF3n y distribuci\\xF3n de contenidos multimedia.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"p\",null,\"Siempre me ha apasionado c\\xF3mo el Software puede aportar valor a casi cualquier situaci\\xF3n y entorno. Por ello, siempre que puedo destino tiempo a seguir form\\xE1ndome tanto en desarrollo de Software, como en ideaci\\xF3n, descubrimiento y definici\\xF3n de producto.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-grid\",{columns:\"8\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"h1\",null,\"Certificado en\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-grid\",{columns:\"8\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"a\",{href:certifications[0].url,target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Badge,{src:certifications[0].image}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"a\",{href:certifications[1].url,target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Badge,{src:certifications[1].image}))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"h1\",null,\"Tecnolog\\xEDas que me encantan\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Slideshow,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Marquee,null,technologies.map((technology,index)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(MarqueeLogo,{key:\"tech-1-\"+index,src:technology.image});}),technologies.map((technology,index)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(MarqueeLogo,{key:\"tech-2-\"+index,src:technology.image});}))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-grid\",{columns:\"8\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(SmallText,null,\"Puedes revisar mi \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"a\",{href:\"https://www.linkedin.com/in/oriolegea/\",target:\"_blank\"},\"LinkedIn\"),\", contactarme, o revisar mis publicaciones para ver las tecnolog\\xEDas con las que voy trabajando. Este slider se ofrece s\\xF3lo a modo de resumen ilustrativo.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"h1\",null,\"Cosas que me interesan\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"h1\",null,\"Mi cronolog\\xEDa\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"1996:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC76 Nazco a mediados de abril en Terrassa, Barcelona.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2006:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDDA7 El Internet llega a casa gracias al ADSL de Wanadoo.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDDA5\\uFE0F Un ordenador de caracter\\xEDsticas decentes llega a casa: P4, 1GB de RAM. Empiezo a instalar programas que pruebo indiscriminadamente en Softonic.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCAC Windows Live Messenger se convierte en el Whatsapp de la \\xE9poca (pero sin ser port\\xE1til, y s\\xF3lo por las tardes) para la mayor\\xEDa de compa\\xF1eros de clase.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2009:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83C\\uDFF4\\u200D\\u2620\\uFE0F\\u200D Veo Piratas de Silicon Valley por primera vez.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC41\\uFE0F Un colega de mi hermano me ense\\xF1a EyeOS y me hago fan del proyecto.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2011:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83C\\uDFAE Colaboro en el desarrollo de una adaptaci\\xF3n del emulador \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"a\",{href:\"https://rathena.org/\",target:\"_blank\"},\"rAthena\"),\" para crear un juego de rol. Aprendo aspectos (muy) b\\xE1sicos de MySQL, PHP y administraci\\xF3n de servidores.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2012:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Finalizo la Educaci\\xF3n Secundaria Obligatoria.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Empiezo a cursar el Grado Medio en Sistemas Microinform\\xE1ticos y Redes.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2013:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCBB Programo \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"a\",{href:\"https://www.frikipoint.com\",target:\"_blank\"},\"FrikiPoint\"),\" junto a un colega, una red social que permite conocer gente cercana a ti de tus mismas aficiones frikis. El proyecto tiene muchos aspectos mejorables, pero acaba resultando una experiencia muy enriquecedora.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2014:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Finalizo el Grado Medio en Sistemas Microinform\\xE1ticos y Redes. Aprendo un mont\\xF3n gracias a un profesorado muy comprometido.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC77 Tras seis meses c\\xF3mo becario, empiezo a trabajar c\\xF3mo Web & CRM Developer en \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"a\",{href:\"https://www.vsn-tv.com\",target:\"_blank\"},\"VSN\"),\". Encarg\\xE1ndome (al mismo tiempo que aprendo) de remodelar el sitio web corporativo, administrar Salesforce, y gestionar y desarrollar el stack de aplicaciones internas.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2015:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Empiezo a cursar el Grado Superior en Desarrollo de Aplicaciones Multiplataforma a distancia.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\u2714\\uFE0F Finaliza en VSN el desarrollo del nuevo sitio web, y otras aplicaciones internas integradas con Salesforce y otros servicios, relativas a la gesti\\xF3n de tiempo de trabajo y satisfacci\\xF3n del cliente.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2016:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Me inscribo en \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"a\",{href:\"https://teamtreehouse.com/\",target:\"_blank\"},\"Treehouse\"),\". Aprendo y consolido mis conocimientos de Javascript y AngularJS.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC77 Empiezo a trabajar con un equipo de programadores de VSN. Trabajamos en una aplicaci\\xF3n web para la gesti\\xF3n y venta de contenidos y noticias para un organismo de la administraci\\xF3n p\\xFAblica de la provincia de Barcelona.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2017:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\u2714\\uFE0F Finaliza mi implicaci\\xF3n con el proyecto de gesti\\xF3n y venta de contenidos y noticias. Finaliza un periodo en el que aprendo much\\xEDsimo gracias a unos compa\\xF1eros muy profesionales y experimentados.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\u2708\\uFE0F Viajo a C\\xE1diz por primera vez y conozco a gente estupenda.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2018:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\u2696\\uFE0F El Reglamento General de Protecci\\xF3n de datos entra en vigor, y nos adaptamos y formamos para ello.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Obtengo la certificaci\\xF3n PSM1 de Scrum.org siguiendo un curso de Mplaza.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC77 Empiezo a liderar un equipo de desarrollo en VSN. Adem\\xE1s de mantener el portal web y todo el trabajo hecho hasta el momento, empezamos a trabajar en VSNCREA, una plataforma de tr\\xE1fico y programaci\\xF3n escalable, multitenant, y altamente customizable y extensible, encargada de la gesti\\xF3n, planificaci\\xF3n y programaci\\xF3n de contenidos tanto en estaciones de TV convencionales, como en medios no lineales.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\u2708\\uFE0F Viajo por trabajo a Amsterdam por primera vez para asistir al IBC, una feria del sector Media & Entertainment.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2019:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Obtengo la certificaci\\xF3n PSPO1 de Scrum.org siguiendo un curso de Mplaza.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Finalizo el Grado Superior en Desarrollo de Aplicaciones Multiplataforma a distancia.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D\\uD83D\\uDC66 El equipo de desarrollo crece gracias a dos nuevas incorporaciones. Empezamos a remodelar de nuevo el sitio web de VSN.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"strong\",null,\"2020:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(\"li\",null,\"\\u2714\\uFE0F Finalizamos la primera versi\\xF3n estable de VSNCREA y la desplegamos en diversos entornos de producci\\xF3n de diversos clientes. Seguimos trabajando en un mont\\xF3n de nuevas funcionalidades nuevas.\"))))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Post));var SmallText=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"e1bq839c0\",label:\"SmallText\"})( false?undefined:{name:\"9c7r58\",styles:\"font-size:10px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c1\",label:\"Container\"})( false?undefined:{name:\"ozz26u\",styles:\"width:800px;margin:0;padding:24px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Badge=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e1bq839c2\",label:\"Badge\"})( false?undefined:{name:\"uqgv2k\",styles:\"max-width:50%;margin-left:25% !important;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Slideshow=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c3\",label:\"Slideshow\"})( false?undefined:{name:\"q11o84\",styles:\"position:relative;overflow:hidden;max-width:100%;height:calc(100% - 50px);\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Marquee=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c4\",label:\"Marquee\"})( false?undefined:{name:\"kj66eg\",styles:\"background:url(slideshow.jpg);position:absolute;left:0;top:0;height:100%;width:5000px;max-width:5000px;animation:slideshow 10s linear infinite;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var MarqueeLogo=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e1bq839c5\",label:\"MarqueeLogo\"})( false?undefined:{name:\"o30h1c\",styles:\"display:inline !important;max-width:100px;width:100px;margin-right:calc(20px) !important;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/**\r\n * This component is the parent of the `content.rendered` HTML. We can use nested\r\n * selectors to style that HTML.\r\n */var Content=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c6\",label:\"Content\"})( false?undefined:{name:\"g1jpwo\",styles:\"color:rgba(12,17,43,0.8);word-break:break-word;*{max-width:100%;}p{line-height:1.6em;}img{width:100%;object-fit:cover;object-position:center;}figure{margin:24px auto;width:100% !important;figcaption{font-size:0.7em;}}iframe{display:block;margin:auto;}blockquote{margin:16px 0;background-color:rgba(0,0,0,0.1);border-left:4px solid rgba(12,17,43);padding:4px 16px;}a{color:rgb(239,190,0) !important;font-weight:bold;text-decoration:none;}a:hover{border-bottom:2px solid rgb(239,190,0);}input[type=\\\"text\\\"],input[type=\\\"email\\\"],input[type=\\\"url\\\"],input[type=\\\"tel\\\"],input[type=\\\"number\\\"],input[type=\\\"date\\\"],textarea,select{display:block;padding:6px 12px;font-size:16px;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:4px;outline-color:transparent;transition:outline-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;margin:8px 0 4px 0;&:focus{outline-color:#1f38c5;}}input[type=\\\"submit\\\"]{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid #1f38c5;padding:12px 36px;font-size:14px;line-height:1.42857143;border-radius:4px;color:#fff;background-color:#1f38c5;}@media (min-width:420px){img.aligncenter,img.alignleft,img.alignright{width:auto;}.aligncenter{display:block;margin-left:auto;margin-right:auto;}.alignright{float:right;margin-left:24px;}.alignleft{float:left;margin-right:24px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/about.js\n");

/***/ })

})