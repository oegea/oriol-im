webpackHotUpdate("oriol-im",{

/***/ "./packages/mars-theme/src/components/about.js":
/*!*****************************************************!*\
  !*** ./packages/mars-theme/src/components/about.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./list */ \"./packages/mars-theme/src/components/list/index.js\");\n/* harmony import */ var _reading_progress__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../reading-progress */ \"./packages/reading-progress/index.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"6w26y-Post\",styles:\"margin-top:7px;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"1j6xbxy-Post\",styles:\"width:35px !important;margin-top:10px;margin-right:15px;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"wlygie-Post\",styles:\"width:35px !important;margin-top:10px;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref4= false?undefined:{name:\"8lh1ht-Post\",styles:\"margin-top:0;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref5= false?undefined:{name:\"1nekj6w-Post\",styles:\"margin-top:10px;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref6= false?undefined:{name:\"10qq7la-Post\",styles:\"border-bottom:0;;label:Post;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var Post=(_ref7)=>{var{state,actions,libraries}=_ref7;/**\r\n   * Once the post has loaded in the DOM, prefetch both the\r\n   * home posts and the list component so if the user visits\r\n   * the home page, everything is ready and it loads instantly.\r\n   */Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(()=>{actions.source.fetch(\"/\");_list__WEBPACK_IMPORTED_MODULE_4__[\"default\"].preload();//Prismjs to highlight code snippets\nif(Prism!==undefined){Prism.highlightAll();}},[]);var certifications=[{image:\"https://static.scrum.org/web/badges/badge-psmi.svg\",url:\"https://www.scrum.org/user/409153/\"},{image:\"https://static.scrum.org/web/badges/badge-pspoi.svg\",url:\"https://www.scrum.org/user/409153/\"}];var technologies=[{image:\"https://wp.oriol.im/wp-content/uploads/2020/05/node.png\"},{image:\"https://wp.oriol.im/wp-content/uploads/2016/01/salesforce_logo.png\"},{image:\"https://wp.oriol.im/wp-content/uploads/2016/07/Angular_full_color_logo.svg_.png\"},{image:\"https://wp.oriol.im/wp-content/uploads/2020/05/react-1.png\"},{image:\"https://wp.oriol.im/wp-content/uploads/2020/05/csharp.png\"}];var things=[{name:\"Product Design & Management\",icon:\"✍️\"},{name:\"Desarrollo de Software\",icon:\"🛠️\"},{name:\"Administración de sistemas y redes\",icon:\"📡\"},{name:\"Tecnología\",icon:\"💻\"},{name:\"Legislación y protección de datos\",icon:\"⚖️\"},{name:\"Carnavales de Cádiz\",icon:\"💃\"},{name:\"Roadtripear por el mundo\",icon:\"🚗\"},{name:\"Enseñanza y compartir conocimientos\",icon:\"👨‍🎓\"}];var booksAndLearning=[{icon:\"📚\",name:\"The Pragmmatic Programmer\"},{icon:\"🎓\",name:\"MongoDB Basics\",link:\"https://university.mongodb.com/course_completion/90d118c2-1540-41f1-8890-b3b3320f7dc0\"},{icon:\"🎓\",name:\"Curso de Electron\",link:\"https://platzi.com/p/oriol-egea-carvajal/curso/1124-electron/diploma/detalle/\"},{icon:\"🎓\",name:\"Curso de Motivación para Equipos de Trabajo\",link:\"https://platzi.com/p/oriol-egea-carvajal/curso/1896-motivacion/diploma/detalle/\"},{icon:\"🎓\",name:\"Curso de Inteligencia Emocional\",link:\"https://platzi.com/p/oriol-egea-carvajal/curso/1614-inteligencia-emocional/diploma/detalle/\"},{icon:\"📚\",name:\"Lean UX: Designing Great Products with Agile Teams\"},{icon:\"📚\",name:\"Clean JavaScript: Código limpio, SOLID y Testing\"},{icon:\"📚\",name:\"The Lean Startup\"},{icon:\"📚\",name:\"The Personal MBA\"},{icon:\"📚\",name:\"Inspired: How to Create Tech Products Customers Love\"},{icon:\"📚\",name:\"Don't make me think\"}];return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_reading_progress__WEBPACK_IMPORTED_MODULE_5__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Content,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Sobre mi\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"20\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"9\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{css:_ref,src:\"https://wp.oriol.im/wp-content/uploads/2016/07/rsz_aaeaaqaaaaaaaalxaaaajda2zdljytzlltiymjetndqyys1hmzi4lwm1mti2nwfiodexma.jpg\",alt:\"Oriol Egea\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{className:\"no-border\",href:\"https://www.linkedin.com/in/oriolegea/\",target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{css:_ref2,src:\"https://wp.oriol.im/wp-content/uploads/2020/05/linkedin-logo-1.png\",alt:\"LinkedIn logo\"})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{className:\"no-border\",href:\"https://www.twitter.com/OriolEgea\",target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"img\",{css:_ref3,src:\"https://wp.oriol.im/wp-content/uploads/2020/05/twitter.png\",alt:\"LinkedIn logo\"}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"1\",\"span-s\":\"row\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"10\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{css:_ref4},\"\\xA1Hola! Soy Oriol. Nac\\xED hace \",new Date().getFullYear()-1996,\" a\\xF1os en Terrassa (Espa\\xF1a). Actualmente trabajo en \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://www.vsn-tv.com/\",target:\"_blank\"},\"VSN\"),\" liderando a (y aprendiendo de) un peque\\xF1o, pero muy talentoso, equipo de programadores, que desarrollamos VSNCREA; un producto de tr\\xE1fico, programaci\\xF3n y distribuci\\xF3n de contenidos multimedia.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Siempre me ha apasionado c\\xF3mo el Software puede aportar valor a casi cualquier situaci\\xF3n y entorno. Por ello, siempre que puedo destino tiempo a seguir form\\xE1ndome tanto en desarrollo de Software, como en ideaci\\xF3n, descubrimiento y definici\\xF3n de producto.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"8\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Certificado en\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"8\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{className:\"no-border\",href:certifications[0].url,target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Badge,{src:certifications[0].image}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{className:\"no-border\",href:certifications[1].url,target:\"_blank\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Badge,{src:certifications[1].image}))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Trabajo diariamente con\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Slideshow,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Marquee,null,technologies.map((technology,index)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(MarqueeLogo,{key:\"tech-1-\"+index,src:technology.image});}),technologies.map((technology,index)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(MarqueeLogo,{key:\"tech-2-\"+index,src:technology.image});}))))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"8\",css:_ref5},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(SmallText,null,\"Puedes revisar mi \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://www.linkedin.com/in/oriolegea/\",target:\"_blank\"},\"LinkedIn\"),\", contactarme, o revisar mis publicaciones para ver las tecnolog\\xEDas con las que voy trabajando. Este slider se ofrece s\\xF3lo a modo de resumen ilustrativo.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"8\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Qu\\xE9 me interesa\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chips\"},things.map((item,index)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chip\",key:\"thing-\"+index},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chip-icon\"},item.icon),item.name);}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Libros y formaci\\xF3n reciente\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chips\"},booksAndLearning.map((item,index)=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chip\",key:\"thing-\"+index},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"md-chip-icon\"},item.icon),item.name,item.link&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{css:_ref6,href:item.link,target:\"_blank\"},\" \\uD83D\\uDD17\"));})))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Mi cronolog\\xEDa\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2020:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2714\\uFE0F Finalizamos la primera versi\\xF3n estable de VSNCREA y la desplegamos en diversos entornos de producci\\xF3n de diversos clientes. Seguimos trabajando en un mont\\xF3n de nuevas funcionalidades nuevas.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83E\\uDDA0 Se declara una pandemia por la COVID-19. Nos quedamos en casa confinados para protegernos a nosotros y a nuestros seres queridos.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2714\\uFE0F Finalizamos la remodelaci\\xF3n del nuevo sitio web de VSN. \\xA1Ya era hora de un cambio de look!\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2019:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Finalizo el Grado Superior en Desarrollo de Aplicaciones Multiplataforma a distancia.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Obtengo la certificaci\\xF3n PSPO1 de Scrum.org siguiendo un curso de Mplaza.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D\\uD83D\\uDC66 El equipo de desarrollo crece gracias a dos nuevas incorporaciones. Empezamos a remodelar de nuevo el sitio web de VSN.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2018:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC77 Empiezo a liderar un equipo de desarrollo en VSN. Adem\\xE1s de mantener el portal web y todo el trabajo hecho hasta el momento, empezamos a trabajar en VSNCREA, una plataforma de tr\\xE1fico y programaci\\xF3n escalable, multitenant, y altamente customizable y extensible, encargada de la gesti\\xF3n, planificaci\\xF3n y programaci\\xF3n de contenidos tanto en estaciones de TV convencionales, como en medios no lineales.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2708\\uFE0F Viajo por primera vez a Amsterdam, para asistir al IBC, una feria del sector Media & Entertainment.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2696\\uFE0F Empieza a aplicarse el Reglamento General de Protecci\\xF3n de datos, y nos adaptamos y formamos para ello.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Obtengo la certificaci\\xF3n PSM1 de Scrum.org siguiendo un curso de Mplaza.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2017:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2714\\uFE0F Finaliza mi implicaci\\xF3n con el proyecto de gesti\\xF3n y venta de contenidos y noticias. Finaliza un periodo en el que aprendo much\\xEDsimo gracias a unos compa\\xF1eros muy profesionales y experimentados.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2708\\uFE0F Viajo a Lisboa por primera vez para asistir al Web Summit.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2708\\uFE0F Viajo a C\\xE1diz por primera vez y conozco a gente estupenda.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2708\\uFE0F Viajo a Bilbao por primera vez junto a gente estupenda.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2016:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC77 Empiezo a trabajar con un equipo de programadores de VSN. Trabajamos en una aplicaci\\xF3n web para la gesti\\xF3n y venta de contenidos y noticias para un organismo de la administraci\\xF3n p\\xFAblica de la provincia de Barcelona.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Me inscribo en \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://teamtreehouse.com/\",target:\"_blank\"},\"Treehouse\"),\". Aprendo y consolido mis conocimientos de Javascript y AngularJS. Durante los sucesivos a\\xF1os me sirve para aprender ReactJS, y realizar alg\\xFAn curso de programaci\\xF3n b\\xE1sica en Swift y Android nativo. Poco despu\\xE9s tambi\\xE9n realizo algunos cursos a trav\\xE9s de Udemy.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC36 La familia crece: Adoptamos a Jeiko, el Spitz Japon\\xE9s m\\xE1s listo y cari\\xF1oso del mundo.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2015:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\u2714\\uFE0F Finaliza en VSN el desarrollo del nuevo sitio web, y otras aplicaciones internas integradas con Salesforce y otros servicios, relativas a la gesti\\xF3n de tiempo de trabajo y satisfacci\\xF3n del cliente.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Empiezo a cursar el Grado Superior en Desarrollo de Aplicaciones Multiplataforma a distancia.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2014:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Finalizo el Grado Medio en Sistemas Microinform\\xE1ticos y Redes. Aprendo un mont\\xF3n gracias a un profesorado muy comprometido.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC77 Tras seis meses c\\xF3mo becario, empiezo a trabajar c\\xF3mo Web & CRM Developer en \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://www.vsn-tv.com\",target:\"_blank\"},\"VSN\"),\". Encarg\\xE1ndome de remodelar el sitio web corporativo, administrar Salesforce, y gestionar y desarrollar el stack de aplicaciones internas.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2013:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCBB Programo \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://www.frikipoint.com\",target:\"_blank\"},\"FrikiPoint\"),\" junto a un colega, una red social que permite conocer gente cercana a ti de tus mismas aficiones frikis. El proyecto tiene muchos aspectos mejorables, pero acaba resultando una experiencia muy enriquecedora.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2012:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCDC Finalizo la Educaci\\xF3n Secundaria Obligatoria.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC68\\u200D\\uD83C\\uDF93 Empiezo a cursar el Grado Medio en Sistemas Microinform\\xE1ticos y Redes.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2011:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83C\\uDFAE Colaboro en el desarrollo de una adaptaci\\xF3n del emulador \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://rathena.org/\",target:\"_blank\"},\"rAthena\"),\" para crear un juego de rol. Aprendo aspectos b\\xE1sicos de MySQL, PHP y administraci\\xF3n de servidores gracias al resto de part\\xEDcipes del proyecto, que dedican mucho tiempo a ense\\xF1arme y compartir su conocimiento.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2009:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83C\\uDFF4\\u200D\\u2620\\uFE0F\\u200D Veo Piratas de Silicon Valley por primera vez.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC41\\uFE0F Un colega de mi hermano me ense\\xF1a EyeOS y me hago fan del proyecto.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2006:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDDA5\\uFE0F Mis padres compran un nuevo ordenador. Empiezo a instalar programas que pruebo indiscriminadamente en Softonic.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCE1 El Internet llega a casa gracias al ADSL de Wanadoo. Utilizamos programas P2P para descargar m\\xFAsica, nuestra ratio de descarga es de una canci\\xF3n cada cuatro horas.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDCAC Windows Live Messenger se convierte en el Whatsapp de la \\xE9poca (pero sin ser port\\xE1til, y s\\xF3lo por las tardes) para la mayor\\xEDa de compa\\xF1eros de clase.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDD04 Microsoft libera Windows Vista. Me las apa\\xF1o para descargarlo por P2P, y al lograr instalarlo (para disgusto de mis padres) dejo inservible el PC por falta de drivers. Consigo repararlo en alg\\xFAn momento utilizando los discos de restauraci\\xF3n.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"2002:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83C\\uDFAE Paso las tardes con mi hermano: Veo la historia de los Zeldas a trav\\xE9s de las partidas de mi hermano, vemos el K3 en casa de nuestra abuela \\uD83D\\uDC75, o salimos a dar vueltas con los patinetes de la \\xE9poca.\"))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"strong\",null,\"1996:\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"ul\",null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"li\",null,\"\\uD83D\\uDC76 Nazco a mediados de abril en Terrassa, Barcelona.\")))))));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Post));var SmallText=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"e1bq839c0\",label:\"SmallText\"})( false?undefined:{name:\"9c7r58\",styles:\"font-size:10px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c1\",label:\"Container\"})( false?undefined:{name:\"ozz26u\",styles:\"width:800px;margin:0;padding:24px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Badge=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e1bq839c2\",label:\"Badge\"})( false?undefined:{name:\"uqgv2k\",styles:\"max-width:50%;margin-left:25% !important;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Slideshow=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c3\",label:\"Slideshow\"})( false?undefined:{name:\"1l90r1l\",styles:\"position:relative;overflow:hidden;max-width:100%;height:110px;max-height:110px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Marquee=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c4\",label:\"Marquee\"})( false?undefined:{name:\"fdcq6g\",styles:\"position:absolute;left:0;top:0;height:100%;width:5000px;max-width:5000px;animation:slideshow 10s linear infinite;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var MarqueeLogo=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"img\",{target:\"e1bq839c5\",label:\"MarqueeLogo\"})( false?undefined:{name:\"o30h1c\",styles:\"display:inline !important;max-width:100px;width:100px;margin-right:calc(20px) !important;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/**\r\n * This component is the parent of the `content.rendered` HTML. We can use nested\r\n * selectors to style that HTML.\r\n */var Content=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1bq839c6\",label:\"Content\"})( false?undefined:{name:\"nd82qj\",styles:\"color:rgba(12,17,43,0.8);word-break:break-word;*{max-width:100%;}p{line-height:1.6em;}img{width:100%;object-fit:cover;object-position:center;}figure{margin:24px auto;width:100% !important;figcaption{font-size:0.7em;}}iframe{display:block;margin:auto;}blockquote{margin:16px 0;background-color:rgba(0,0,0,0.1);border-left:4px solid rgba(12,17,43);padding:4px 16px;}a{color:rgb(239,190,0) !important;font-weight:bold;text-decoration:none;}a:hover{border-bottom:2px solid rgb(239,190,0);}a.no-border{border-bottom:none !important;}input[type=\\\"text\\\"],input[type=\\\"email\\\"],input[type=\\\"url\\\"],input[type=\\\"tel\\\"],input[type=\\\"number\\\"],input[type=\\\"date\\\"],textarea,select{display:block;padding:6px 12px;font-size:16px;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:4px;outline-color:transparent;transition:outline-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;margin:8px 0 4px 0;&:focus{outline-color:#1f38c5;}}input[type=\\\"submit\\\"]{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid #1f38c5;padding:12px 36px;font-size:14px;line-height:1.42857143;border-radius:4px;color:#fff;background-color:#1f38c5;}@media (min-width:420px){img.aligncenter,img.alignleft,img.alignright{width:auto;}.aligncenter{display:block;margin-left:auto;margin-right:auto;}.alignright{float:right;margin-left:24px;}.alignleft{float:left;margin-right:24px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL2Fib3V0LmpzP2JlZGUiXSwibmFtZXMiOlsiUG9zdCIsInN0YXRlIiwiYWN0aW9ucyIsImxpYnJhcmllcyIsInVzZUVmZmVjdCIsInNvdXJjZSIsImZldGNoIiwiTGlzdCIsInByZWxvYWQiLCJQcmlzbSIsInVuZGVmaW5lZCIsImhpZ2hsaWdodEFsbCIsImNlcnRpZmljYXRpb25zIiwiaW1hZ2UiLCJ1cmwiLCJ0ZWNobm9sb2dpZXMiLCJ0aGluZ3MiLCJuYW1lIiwiaWNvbiIsImJvb2tzQW5kTGVhcm5pbmciLCJsaW5rIiwiRGF0ZSIsImdldEZ1bGxZZWFyIiwibWFwIiwidGVjaG5vbG9neSIsImluZGV4IiwiaXRlbSIsImNvbm5lY3QiLCJTbWFsbFRleHQiLCJDb250YWluZXIiLCJCYWRnZSIsIlNsaWRlc2hvdyIsIk1hcnF1ZWUiLCJNYXJxdWVlTG9nbyIsIkNvbnRlbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztvNGxLQUtBLEdBQU1BLEtBQUksQ0FBRyxTQUFtQyxJQUFsQyxDQUFFQyxLQUFGLENBQVNDLE9BQVQsQ0FBa0JDLFNBQWxCLENBQWtDLE9BRzlDOzs7O0tBS0FDLHVEQUFTLENBQUMsSUFBTSxDQUNkRixPQUFPLENBQUNHLE1BQVIsQ0FBZUMsS0FBZixDQUFxQixHQUFyQixFQUNBQyw2Q0FBSSxDQUFDQyxPQUFMLEdBRUE7QUFDQSxHQUFJQyxLQUFLLEdBQUtDLFNBQWQsQ0FBd0IsQ0FDdEJELEtBQUssQ0FBQ0UsWUFBTixHQUNELENBQ0YsQ0FSUSxDQVFOLEVBUk0sQ0FBVCxDQVdBLEdBQU1DLGVBQWMsQ0FBRyxDQUNyQixDQUNFQyxLQUFLLENBQUUsb0RBRFQsQ0FFRUMsR0FBRyxDQUFFLG9DQUZQLENBRHFCLENBS3JCLENBQ0VELEtBQUssQ0FBRSxxREFEVCxDQUVFQyxHQUFHLENBQUUsb0NBRlAsQ0FMcUIsQ0FBdkIsQ0FXQSxHQUFNQyxhQUFZLENB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MkJBQWpCLENBT0E7OztHQUlBLEdBQU1DLFFBQU8sbXU1QkFBYiIsImZpbGUiOiIuL3BhY2thZ2VzL21hcnMtdGhlbWUvc3JjL2NvbXBvbmVudHMvYWJvdXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBMaXN0IGZyb20gXCIuL2xpc3RcIjtcclxuaW1wb3J0IFJlYWRpbmdQcm9ncmVzcyBmcm9tIFwiLi4vLi4vLi4vcmVhZGluZy1wcm9ncmVzc1wiO1xyXG5cclxuY29uc3QgUG9zdCA9ICh7IHN0YXRlLCBhY3Rpb25zLCBsaWJyYXJpZXMgfSkgPT4ge1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogT25jZSB0aGUgcG9zdCBoYXMgbG9hZGVkIGluIHRoZSBET00sIHByZWZldGNoIGJvdGggdGhlXHJcbiAgICogaG9tZSBwb3N0cyBhbmQgdGhlIGxpc3QgY29tcG9uZW50IHNvIGlmIHRoZSB1c2VyIHZpc2l0c1xyXG4gICAqIHRoZSBob21lIHBhZ2UsIGV2ZXJ5dGhpbmcgaXMgcmVhZHkgYW5kIGl0IGxvYWRzIGluc3RhbnRseS5cclxuICAgKi9cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgYWN0aW9ucy5zb3VyY2UuZmV0Y2goXCIvXCIpO1xyXG4gICAgTGlzdC5wcmVsb2FkKCk7XHJcblxyXG4gICAgLy9QcmlzbWpzIHRvIGhpZ2hsaWdodCBjb2RlIHNuaXBwZXRzXHJcbiAgICBpZiAoUHJpc20gIT09IHVuZGVmaW5lZCl7XHJcbiAgICAgIFByaXNtLmhpZ2hsaWdodEFsbCgpO1xyXG4gICAgfVxyXG4gIH0sIFtdKTtcclxuXHJcblxyXG4gIGNvbnN0IGNlcnRpZmljYXRpb25zID0gW1xyXG4gICAge1xyXG4gICAgICBpbWFnZTogXCJodHRwczovL3N0YXRpYy5zY3J1bS5vcmcvd2ViL2JhZGdlcy9iYWRnZS1wc21pLnN2Z1wiLFxyXG4gICAgICB1cmw6IFwiaHR0cHM6Ly93d3cuc2NydW0ub3JnL3VzZXIvNDA5MTUzL1wiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaW1hZ2U6IFwiaHR0cHM6Ly9zdGF0aWMuc2NydW0ub3JnL3dlYi9iYWRnZXMvYmFkZ2UtcHNwb2kuc3ZnXCIsXHJcbiAgICAgIHVybDogXCJodHRwczovL3d3dy5zY3J1bS5vcmcvdXNlci80MDkxNTMvXCIsXHJcbiAgICB9LFxyXG4gIF07XHJcblxyXG4gIGNvbnN0IHRlY2hub2xvZ2llcyA9IFtcclxuICAgIHtcclxuICAgICAgaW1hZ2U6IFwiaHR0cHM6Ly93cC5vcmlvbC5pbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wNS9ub2RlLnBuZ1wiLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaW1hZ2U6IFwiaHR0cHM6Ly93cC5vcmlvbC5pbS93cC1jb250ZW50L3VwbG9hZHMvMjAxNi8wMS9zYWxlc2ZvcmNlX2xvZ28ucG5nXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpbWFnZTogXCJodHRwczovL3dwLm9yaW9sLmltL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE2LzA3L0FuZ3VsYXJfZnVsbF9jb2xvcl9sb2dvLnN2Z18ucG5nXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpbWFnZTogXCJodHRwczovL3dwLm9yaW9sLmltL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA1L3JlYWN0LTEucG5nXCIsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpbWFnZTogXCJodHRwczovL3dwLm9yaW9sLmltL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA1L2NzaGFycC5wbmdcIixcclxuICAgIH0sXHJcbiAgXTtcclxuXHJcblxyXG4gIGNvbnN0IHRoaW5ncyA9IFtcclxuICAgIHsgbmFtZTogXCJQcm9kdWN0IERlc2lnbiAmIE1hbmFnZW1lbnRcIiwgaWNvbjogXCLinI3vuI9cIiB9LFxyXG4gICAgeyBuYW1lOiBcIkRlc2Fycm9sbG8gZGUgU29mdHdhcmVcIiwgaWNvbjogXCLwn5ug77iPXCIgfSxcclxuICAgIHsgbmFtZTogXCJBZG1pbmlzdHJhY2nDs24gZGUgc2lzdGVtYXMgeSByZWRlc1wiLCBpY29uOiBcIvCfk6FcIiB9LFxyXG4gICAgeyBuYW1lOiBcIlRlY25vbG9nw61hXCIsIGljb246IFwi8J+Su1wiIH0sXHJcbiAgICB7IG5hbWU6IFwiTGVnaXNsYWNpw7NuIHkgcHJvdGVjY2nDs24gZGUgZGF0b3NcIiwgaWNvbjogXCLimpbvuI9cIiB9LFxyXG4gICAgeyBuYW1lOiBcIkNhcm5hdmFsZXMgZGUgQ8OhZGl6XCIsIGljb246IFwi8J+Sg1wiIH0sXHJcbiAgICB7IG5hbWU6IFwiUm9hZHRyaXBlYXIgcG9yIGVsIG11bmRvXCIsIGljb246IFwi8J+al1wiIH0sXHJcbiAgICB7IG5hbWU6IFwiRW5zZcOxYW56YSB5IGNvbXBhcnRpciBjb25vY2ltaWVudG9zXCIsIGljb246IFwi8J+RqOKAjfCfjpNcIiB9LFxyXG4gIF07XHJcblxyXG4gIGNvbnN0IGJvb2tzQW5kTGVhcm5pbmcgPSBbXHJcbiAgICB7IGljb246IFwi8J+TmlwiLCBuYW1lOiBcIlRoZSBQcmFnbW1hdGljIFByb2dyYW1tZXJcIn0sXHJcbiAgICB7IGljb246IFwi8J+Ok1wiLCBuYW1lOiBcIk1vbmdvREIgQmFzaWNzXCIsIGxpbms6IFwiaHR0cHM6Ly91bml2ZXJzaXR5Lm1vbmdvZGIuY29tL2NvdXJzZV9jb21wbGV0aW9uLzkwZDExOGMyLTE1NDAtNDFmMS04ODkwLWIzYjMzMjBmN2RjMFwifSxcclxuICAgIHsgaWNvbjogXCLwn46TXCIsIG5hbWU6IFwiQ3Vyc28gZGUgRWxlY3Ryb25cIiwgbGluazogXCJodHRwczovL3BsYXR6aS5jb20vcC9vcmlvbC1lZ2VhLWNhcnZhamFsL2N1cnNvLzExMjQtZWxlY3Ryb24vZGlwbG9tYS9kZXRhbGxlL1wifSxcclxuICAgIHsgaWNvbjogXCLwn46TXCIsIG5hbWU6IFwiQ3Vyc28gZGUgTW90aXZhY2nDs24gcGFyYSBFcXVpcG9zIGRlIFRyYWJham9cIiwgbGluazogXCJodHRwczovL3BsYXR6aS5jb20vcC9vcmlvbC1lZ2VhLWNhcnZhamFsL2N1cnNvLzE4OTYtbW90aXZhY2lvbi9kaXBsb21hL2RldGFsbGUvXCJ9LFxyXG4gICAgeyBpY29uOiBcIvCfjpNcIiwgbmFtZTogXCJDdXJzbyBkZSBJbnRlbGlnZW5jaWEgRW1vY2lvbmFsXCIsIGxpbms6IFwiaHR0cHM6Ly9wbGF0emkuY29tL3Avb3Jpb2wtZWdlYS1jYXJ2YWphbC9jdXJzby8xNjE0LWludGVsaWdlbmNpYS1lbW9jaW9uYWwvZGlwbG9tYS9kZXRhbGxlL1wifSxcclxuICAgIHsgaWNvbjogXCLwn5OaXCIsIG5hbWU6IFwiTGVhbiBVWDogRGVzaWduaW5nIEdyZWF0IFByb2R1Y3RzIHdpdGggQWdpbGUgVGVhbXNcIn0sXHJcbiAgICB7IGljb246IFwi8J+TmlwiLCBuYW1lOiBcIkNsZWFuIEphdmFTY3JpcHQ6IEPDs2RpZ28gbGltcGlvLCBTT0xJRCB5IFRlc3RpbmdcIn0sXHJcbiAgICB7IGljb246IFwi8J+TmlwiLCBuYW1lOiBcIlRoZSBMZWFuIFN0YXJ0dXBcIn0sXHJcbiAgICB7IGljb246IFwi8J+TmlwiLCBuYW1lOiBcIlRoZSBQZXJzb25hbCBNQkFcIiB9LFxyXG4gICAgeyBpY29uOiBcIvCfk5pcIiwgbmFtZTogXCJJbnNwaXJlZDogSG93IHRvIENyZWF0ZSBUZWNoIFByb2R1Y3RzIEN1c3RvbWVycyBMb3ZlXCIgfSxcclxuICAgIHsgaWNvbjogXCLwn5OaXCIsIG5hbWU6IFwiRG9uJ3QgbWFrZSBtZSB0aGlua1wiIH0sXHJcbiAgXVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPD5cclxuICAgIDxSZWFkaW5nUHJvZ3Jlc3MgLz5cclxuICAgIDxDb250YWluZXI+XHJcbiAgICAgIHsvKiBSZW5kZXIgdGhlIGNvbnRlbnQgdXNpbmcgdGhlIEh0bWwyUmVhY3QgY29tcG9uZW50IHNvIHRoZSBIVE1MIGlzIHByb2Nlc3NlZFxyXG4gICAgICAgYnkgdGhlIHByb2Nlc3NvcnMgd2UgaW5jbHVkZWQgaW4gdGhlIGxpYnJhcmllcy5odG1sMnJlYWN0LnByb2Nlc3NvcnMgYXJyYXkuICovfVxyXG4gICAgICA8Q29udGVudD5cclxuICAgICAgICA8aDE+U29icmUgbWk8L2gxPlxyXG4gICAgICAgIDxyLWdyaWQgY29sdW1ucz1cIjIwXCI+XHJcbiAgICAgICAgICAgIDxyLWNlbGwgc3Bhbj1cIjlcIiBzcGFuLXM9XCJyb3dcIj5cclxuICAgICAgICAgICAgICA8aW1nIGNzcz17Y3NzYG1hcmdpbi10b3A6IDdweDtgfSBzcmM9XCJodHRwczovL3dwLm9yaW9sLmltL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE2LzA3L3Jzel9hYWVhYXFhYWFhYWFhYWx4YWFhYWpkYTJ6ZGxqeXR6bGx0aXltamV0bmRxeXlzMWhtemk0bHdtMW10aTJud2Zpb2RleG1hLmpwZ1wiIGFsdD1cIk9yaW9sIEVnZWFcIiAvPlxyXG4gICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cIm5vLWJvcmRlclwiIGhyZWY9XCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vb3Jpb2xlZ2VhL1wiIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBjc3M9e2Nzc2B3aWR0aDogMzVweCAhaW1wb3J0YW50OyBtYXJnaW4tdG9wOiAxMHB4OyBtYXJnaW4tcmlnaHQ6IDE1cHg7YH0gc3JjPVwiaHR0cHM6Ly93cC5vcmlvbC5pbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wNS9saW5rZWRpbi1sb2dvLTEucG5nXCIgYWx0PVwiTGlua2VkSW4gbG9nb1wiLz5cclxuICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwibm8tYm9yZGVyXCIgaHJlZj1cImh0dHBzOi8vd3d3LnR3aXR0ZXIuY29tL09yaW9sRWdlYVwiIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgPGltZyBjc3M9e2Nzc2B3aWR0aDogMzVweCAhaW1wb3J0YW50OyBtYXJnaW4tdG9wOiAxMHB4O2B9IHNyYz1cImh0dHBzOi8vd3Aub3Jpb2wuaW0vd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDUvdHdpdHRlci5wbmdcIiBhbHQ9XCJMaW5rZWRJbiBsb2dvXCIvPlxyXG4gICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgPC9yLWNlbGw+XHJcbiAgICAgICAgICAgIDxyLWNlbGwgc3Bhbj1cIjFcIiBzcGFuLXM9XCJyb3dcIj48L3ItY2VsbD5cclxuICAgICAgICAgICAgPHItY2VsbCBzcGFuPVwiMTBcIiBzcGFuLXM9XCJyb3dcIj5cclxuICAgICAgICAgICAgICAgIDxwIGNzcz17Y3NzYG1hcmdpbi10b3A6IDA7YH0+XHJcbiAgICAgICAgICAgICAgICAgICAgwqFIb2xhISBTb3kgT3Jpb2wuIE5hY8OtIGhhY2Uge25ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKS0xOTk2fSBhw7FvcyBlbiBUZXJyYXNzYSAoRXNwYcOxYSkuIFxyXG4gICAgICAgICAgICAgICAgICAgIEFjdHVhbG1lbnRlIHRyYWJham8gZW4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LnZzbi10di5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VlNOPC9hPiBsaWRlcmFuZG8gYSAoeSBhcHJlbmRpZW5kbyBkZSkgdW4gcGVxdWXDsW8sIHBlcm8gbXV5IHRhbGVudG9zbywgZXF1aXBvIGRlIHByb2dyYW1hZG9yZXMsIHF1ZSBkZXNhcnJvbGxhbW9zIFZTTkNSRUE7IHVuIHByb2R1Y3RvIGRlIHRyw6FmaWNvLCBwcm9ncmFtYWNpw7NuIHkgZGlzdHJpYnVjacOzbiBkZSBjb250ZW5pZG9zIG11bHRpbWVkaWEuXHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICBTaWVtcHJlIG1lIGhhIGFwYXNpb25hZG8gY8OzbW8gZWwgU29mdHdhcmUgcHVlZGUgYXBvcnRhciB2YWxvciBhIGNhc2kgY3VhbHF1aWVyIHNpdHVhY2nDs24geSBlbnRvcm5vLiBQb3IgZWxsbywgc2llbXByZSBxdWUgcHVlZG8gZGVzdGlubyB0aWVtcG8gYSBzZWd1aXIgZm9ybcOhbmRvbWUgdGFudG8gZW4gZGVzYXJyb2xsbyBkZSBTb2Z0d2FyZSwgY29tbyBlbiBpZGVhY2nDs24sIGRlc2N1YnJpbWllbnRvIHkgZGVmaW5pY2nDs24gZGUgcHJvZHVjdG8uXHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgIDwvci1jZWxsPlxyXG4gICAgICAgIDwvci1ncmlkPlxyXG4gICAgICAgIDxyLWdyaWQgY29sdW1ucz1cIjhcIj5cclxuICAgICAgICAgICAgPHItY2VsbCBzcGFuPVwiNFwiIHNwYW4tcz1cInJvd1wiPlxyXG4gICAgICAgICAgICAgICAgPGgxPkNlcnRpZmljYWRvIGVuPC9oMT5cclxuICAgICAgICAgICAgICAgIDxyLWdyaWQgY29sdW1ucz1cIjhcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ci1jZWxsIHNwYW49XCI0XCIgc3Bhbi1zPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJuby1ib3JkZXJcIiBocmVmPXtjZXJ0aWZpY2F0aW9uc1swXS51cmx9IHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QmFkZ2Ugc3JjPXtjZXJ0aWZpY2F0aW9uc1swXS5pbWFnZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L3ItY2VsbD5cclxuICAgICAgICAgICAgICAgICAgICA8ci1jZWxsIHNwYW49XCI0XCIgc3Bhbi1zPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJuby1ib3JkZXJcIiBocmVmPXtjZXJ0aWZpY2F0aW9uc1sxXS51cmx9IHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8QmFkZ2Ugc3JjPXtjZXJ0aWZpY2F0aW9uc1sxXS5pbWFnZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L3ItY2VsbD5cclxuICAgICAgICAgICAgICAgIDwvci1ncmlkPlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvci1jZWxsPlxyXG4gICAgICAgICAgICA8ci1jZWxsIHNwYW49XCI0XCIgc3Bhbi1zPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgICA8aDE+VHJhYmFqbyBkaWFyaWFtZW50ZSBjb248L2gxPlxyXG4gICAgICAgICAgICAgICAgICA8U2xpZGVzaG93PlxyXG4gICAgICAgICAgICAgICAgICAgIDxNYXJxdWVlPlxyXG4gICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZWNobm9sb2dpZXMubWFwKCh0ZWNobm9sb2d5LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8TWFycXVlZUxvZ28ga2V5PXtcInRlY2gtMS1cIitpbmRleH0gc3JjPXt0ZWNobm9sb2d5LmltYWdlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxue1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGVjaG5vbG9naWVzLm1hcCgodGVjaG5vbG9neSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPE1hcnF1ZWVMb2dvIGtleT17XCJ0ZWNoLTItXCIraW5kZXh9IHNyYz17dGVjaG5vbG9neS5pbWFnZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA8L01hcnF1ZWU+XHJcbiAgICAgICAgICAgICAgICAgIDwvU2xpZGVzaG93PlxyXG4gICAgICAgICAgICA8L3ItY2VsbD5cclxuICAgICAgICA8L3ItZ3JpZD5cclxuICAgICAgICA8ci1ncmlkIGNvbHVtbnM9XCI4XCIgY3NzPXtjc3NgbWFyZ2luLXRvcDogMTBweDtgfT5cclxuICAgICAgICAgICAgPHItY2VsbCBzcGFuPVwiNFwiIHNwYW4tcz1cInJvd1wiPjwvci1jZWxsPlxyXG4gICAgICAgICAgICA8ci1jZWxsIHNwYW49XCI0XCIgc3Bhbi1zPVwicm93XCI+XHJcbiAgICAgICAgICAgICAgPFNtYWxsVGV4dD5QdWVkZXMgcmV2aXNhciBtaSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL29yaW9sZWdlYS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5MaW5rZWRJbjwvYT4sIGNvbnRhY3Rhcm1lLCBvIHJldmlzYXIgbWlzIHB1YmxpY2FjaW9uZXMgcGFyYSB2ZXIgbGFzIHRlY25vbG9nw61hcyBjb24gbGFzIHF1ZSB2b3kgdHJhYmFqYW5kby4gRXN0ZSBzbGlkZXIgc2Ugb2ZyZWNlIHPDs2xvIGEgbW9kbyBkZSByZXN1bWVuIGlsdXN0cmF0aXZvLjwvU21hbGxUZXh0PiBcclxuICAgICAgICAgICAgPC9yLWNlbGw+XHJcbiAgICAgICAgPC9yLWdyaWQ+XHJcblxyXG4gICAgICAgIDxyLWdyaWQgY29sdW1ucz1cIjhcIj5cclxuICAgICAgICAgICAgPHItY2VsbCBzcGFuPVwiNFwiIHNwYW4tcz1cInJvd1wiPlxyXG5cclxuICAgICAgICAgICAgPGgxPlF1w6kgbWUgaW50ZXJlc2E8L2gxPlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZC1jaGlwc1wiPlxyXG4gICAgICAgICAgICAgIHt0aGluZ3MubWFwKChpdGVtLCBpbmRleCk9PntcclxuICAgICAgICAgICAgICAgIHJldHVybihcclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZC1jaGlwXCIga2V5PXtcInRoaW5nLVwiK2luZGV4fT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1kLWNoaXAtaWNvblwiPntpdGVtLmljb259PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAge2l0ZW0ubmFtZX1cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIH0pfVxyXG5cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPC9yLWNlbGw+XHJcbiAgICAgICAgICAgIDxyLWNlbGwgc3Bhbj1cIjRcIiBzcGFuLXM9XCJyb3dcIj5cclxuICAgICAgICAgICAgPGgxPkxpYnJvcyB5IGZvcm1hY2nDs24gcmVjaWVudGU8L2gxPlxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1kLWNoaXBzXCI+XHJcbiAgICAgICAgICAgICAgICB7Ym9va3NBbmRMZWFybmluZy5tYXAoKGl0ZW0sIGluZGV4KT0+e1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4oXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZC1jaGlwXCIga2V5PXtcInRoaW5nLVwiK2luZGV4fT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWQtY2hpcC1pY29uXCI+e2l0ZW0uaWNvbn08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIHtpdGVtLm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICB7aXRlbS5saW5rICYmIFxyXG4gICAgICAgICAgICAgICAgICAgICAgPGEgY3NzPXtjc3NgYm9yZGVyLWJvdHRvbTogMDtgfSBocmVmPXtpdGVtLmxpbmt9IHRhcmdldD1cIl9ibGFua1wiPiDwn5SXPC9hPn1cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L3ItY2VsbD5cclxuICAgICAgICA8L3ItZ3JpZD5cclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgPGgxPk1pIGNyb25vbG9nw61hPC9oMT5cclxuICAgICAgICA8dWw+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+MjAyMDo8L3N0cm9uZz5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7inJTvuI8gRmluYWxpemFtb3MgbGEgcHJpbWVyYSB2ZXJzacOzbiBlc3RhYmxlIGRlIFZTTkNSRUEgeSBsYSBkZXNwbGVnYW1vcyBlbiBkaXZlcnNvcyBlbnRvcm5vcyBkZSBwcm9kdWNjacOzbiBkZSBkaXZlcnNvcyBjbGllbnRlcy4gU2VndWltb3MgdHJhYmFqYW5kbyBlbiB1biBtb250w7NuIGRlIG51ZXZhcyBmdW5jaW9uYWxpZGFkZXMgbnVldmFzLjwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPvCfpqAgU2UgZGVjbGFyYSB1bmEgcGFuZGVtaWEgcG9yIGxhIENPVklELTE5LiBOb3MgcXVlZGFtb3MgZW4gY2FzYSBjb25maW5hZG9zIHBhcmEgcHJvdGVnZXJub3MgYSBub3NvdHJvcyB5IGEgbnVlc3Ryb3Mgc2VyZXMgcXVlcmlkb3MuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+4pyU77iPIEZpbmFsaXphbW9zIGxhIHJlbW9kZWxhY2nDs24gZGVsIG51ZXZvIHNpdGlvIHdlYiBkZSBWU04uIMKhWWEgZXJhIGhvcmEgZGUgdW4gY2FtYmlvIGRlIGxvb2shPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+MjAxOTo8L3N0cm9uZz5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5OcIEZpbmFsaXpvIGVsIEdyYWRvIFN1cGVyaW9yIGVuIERlc2Fycm9sbG8gZGUgQXBsaWNhY2lvbmVzIE11bHRpcGxhdGFmb3JtYSBhIGRpc3RhbmNpYS48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5OcIE9idGVuZ28gbGEgY2VydGlmaWNhY2nDs24gUFNQTzEgZGUgU2NydW0ub3JnIHNpZ3VpZW5kbyB1biBjdXJzbyBkZSBNcGxhemEuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+RqeKAjfCfkanigI3wn5Gn4oCN8J+RpiBFbCBlcXVpcG8gZGUgZGVzYXJyb2xsbyBjcmVjZSBncmFjaWFzIGEgZG9zIG51ZXZhcyBpbmNvcnBvcmFjaW9uZXMuIEVtcGV6YW1vcyBhIHJlbW9kZWxhciBkZSBudWV2byBlbCBzaXRpbyB3ZWIgZGUgVlNOLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICA8c3Ryb25nPjIwMTg6PC9zdHJvbmc+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICA8bGk+8J+RtyBFbXBpZXpvIGEgbGlkZXJhciB1biBlcXVpcG8gZGUgZGVzYXJyb2xsbyBlbiBWU04uIEFkZW3DoXMgZGUgbWFudGVuZXIgZWwgcG9ydGFsIHdlYiB5IHRvZG8gZWwgdHJhYmFqbyBoZWNobyBoYXN0YSBlbCBtb21lbnRvLCBlbXBlemFtb3MgYSB0cmFiYWphciBlbiBWU05DUkVBLCB1bmEgcGxhdGFmb3JtYSBkZSB0csOhZmljbyB5IHByb2dyYW1hY2nDs24gZXNjYWxhYmxlLCBtdWx0aXRlbmFudCwgeSBhbHRhbWVudGUgY3VzdG9taXphYmxlIHkgZXh0ZW5zaWJsZSwgZW5jYXJnYWRhIGRlIGxhIGdlc3Rpw7NuLCBwbGFuaWZpY2FjacOzbiB5IHByb2dyYW1hY2nDs24gZGUgY29udGVuaWRvcyB0YW50byBlbiBlc3RhY2lvbmVzIGRlIFRWIGNvbnZlbmNpb25hbGVzLCBjb21vIGVuIG1lZGlvcyBubyBsaW5lYWxlcy48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7inIjvuI8gVmlham8gcG9yIHByaW1lcmEgdmV6IGEgQW1zdGVyZGFtLCBwYXJhIGFzaXN0aXIgYWwgSUJDLCB1bmEgZmVyaWEgZGVsIHNlY3RvciBNZWRpYSAmIEVudGVydGFpbm1lbnQuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+4pqW77iPIEVtcGllemEgYSBhcGxpY2Fyc2UgZWwgUmVnbGFtZW50byBHZW5lcmFsIGRlIFByb3RlY2Npw7NuIGRlIGRhdG9zLCB5IG5vcyBhZGFwdGFtb3MgeSBmb3JtYW1vcyBwYXJhIGVsbG8uPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+TnCBPYnRlbmdvIGxhIGNlcnRpZmljYWNpw7NuIFBTTTEgZGUgU2NydW0ub3JnIHNpZ3VpZW5kbyB1biBjdXJzbyBkZSBNcGxhemEuPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+MjAxNzo8L3N0cm9uZz5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7inJTvuI8gRmluYWxpemEgbWkgaW1wbGljYWNpw7NuIGNvbiBlbCBwcm95ZWN0byBkZSBnZXN0acOzbiB5IHZlbnRhIGRlIGNvbnRlbmlkb3MgeSBub3RpY2lhcy4gRmluYWxpemEgdW4gcGVyaW9kbyBlbiBlbCBxdWUgYXByZW5kbyBtdWNow61zaW1vIGdyYWNpYXMgYSB1bm9zIGNvbXBhw7Flcm9zIG11eSBwcm9mZXNpb25hbGVzIHkgZXhwZXJpbWVudGFkb3MuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+4pyI77iPIFZpYWpvIGEgTGlzYm9hIHBvciBwcmltZXJhIHZleiBwYXJhIGFzaXN0aXIgYWwgV2ViIFN1bW1pdC48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7inIjvuI8gVmlham8gYSBDw6FkaXogcG9yIHByaW1lcmEgdmV6IHkgY29ub3pjbyBhIGdlbnRlIGVzdHVwZW5kYS48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7inIjvuI8gVmlham8gYSBCaWxiYW8gcG9yIHByaW1lcmEgdmV6IGp1bnRvIGEgZ2VudGUgZXN0dXBlbmRhLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICA8c3Ryb25nPjIwMTY6PC9zdHJvbmc+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICA8bGk+8J+RtyBFbXBpZXpvIGEgdHJhYmFqYXIgY29uIHVuIGVxdWlwbyBkZSBwcm9ncmFtYWRvcmVzIGRlIFZTTi4gVHJhYmFqYW1vcyBlbiB1bmEgYXBsaWNhY2nDs24gd2ViIHBhcmEgbGEgZ2VzdGnDs24geSB2ZW50YSBkZSBjb250ZW5pZG9zIHkgbm90aWNpYXMgcGFyYSB1biBvcmdhbmlzbW8gZGUgbGEgYWRtaW5pc3RyYWNpw7NuIHDDumJsaWNhIGRlIGxhIHByb3ZpbmNpYSBkZSBCYXJjZWxvbmEuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+RqOKAjfCfjpMgTWUgaW5zY3JpYm8gZW4gPGEgaHJlZj1cImh0dHBzOi8vdGVhbXRyZWVob3VzZS5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VHJlZWhvdXNlPC9hPi4gQXByZW5kbyB5IGNvbnNvbGlkbyBtaXMgY29ub2NpbWllbnRvcyBkZSBKYXZhc2NyaXB0IHkgQW5ndWxhckpTLiBEdXJhbnRlIGxvcyBzdWNlc2l2b3MgYcOxb3MgbWUgc2lydmUgcGFyYSBhcHJlbmRlciBSZWFjdEpTLCB5IHJlYWxpemFyIGFsZ8O6biBjdXJzbyBkZSBwcm9ncmFtYWNpw7NuIGLDoXNpY2EgZW4gU3dpZnQgeSBBbmRyb2lkIG5hdGl2by4gUG9jbyBkZXNwdcOpcyB0YW1iacOpbiByZWFsaXpvIGFsZ3Vub3MgY3Vyc29zIGEgdHJhdsOpcyBkZSBVZGVteS48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5C2IExhIGZhbWlsaWEgY3JlY2U6IEFkb3B0YW1vcyBhIEplaWtvLCBlbCBTcGl0eiBKYXBvbsOpcyBtw6FzIGxpc3RvIHkgY2FyacOxb3NvIGRlbCBtdW5kby48L2xpPiAgXHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICA8c3Ryb25nPjIwMTU6PC9zdHJvbmc+XHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICA8bGk+4pyU77iPIEZpbmFsaXphIGVuIFZTTiBlbCBkZXNhcnJvbGxvIGRlbCBudWV2byBzaXRpbyB3ZWIsIHkgb3RyYXMgYXBsaWNhY2lvbmVzIGludGVybmFzIGludGVncmFkYXMgY29uIFNhbGVzZm9yY2UgeSBvdHJvcyBzZXJ2aWNpb3MsIHJlbGF0aXZhcyBhIGxhIGdlc3Rpw7NuIGRlIHRpZW1wbyBkZSB0cmFiYWpvIHkgc2F0aXNmYWNjacOzbiBkZWwgY2xpZW50ZS48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5Go4oCN8J+OkyBFbXBpZXpvIGEgY3Vyc2FyIGVsIEdyYWRvIFN1cGVyaW9yIGVuIERlc2Fycm9sbG8gZGUgQXBsaWNhY2lvbmVzIE11bHRpcGxhdGFmb3JtYSBhIGRpc3RhbmNpYS48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgPHN0cm9uZz4yMDE0Ojwvc3Ryb25nPlxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgPGxpPvCfk5wgRmluYWxpem8gZWwgR3JhZG8gTWVkaW8gZW4gU2lzdGVtYXMgTWljcm9pbmZvcm3DoXRpY29zIHkgUmVkZXMuIEFwcmVuZG8gdW4gbW9udMOzbiBncmFjaWFzIGEgdW4gcHJvZmVzb3JhZG8gbXV5IGNvbXByb21ldGlkby48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5G3IFRyYXMgc2VpcyBtZXNlcyBjw7NtbyBiZWNhcmlvLCBlbXBpZXpvIGEgdHJhYmFqYXIgY8OzbW8gV2ViICYgQ1JNIERldmVsb3BlciBlbiA8YSBocmVmPVwiaHR0cHM6Ly93d3cudnNuLXR2LmNvbVwiIHRhcmdldD1cIl9ibGFua1wiPlZTTjwvYT4uIEVuY2FyZ8OhbmRvbWUgZGUgcmVtb2RlbGFyIGVsIHNpdGlvIHdlYiBjb3Jwb3JhdGl2bywgYWRtaW5pc3RyYXIgU2FsZXNmb3JjZSwgeSBnZXN0aW9uYXIgeSBkZXNhcnJvbGxhciBlbCBzdGFjayBkZSBhcGxpY2FjaW9uZXMgaW50ZXJuYXMuPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+MjAxMzo8L3N0cm9uZz4gXHJcbiAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICA8bGk+8J+SuyBQcm9ncmFtbyA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZnJpa2lwb2ludC5jb21cIiB0YXJnZXQ9XCJfYmxhbmtcIj5GcmlraVBvaW50PC9hPiBqdW50byBhIHVuIGNvbGVnYSwgdW5hIHJlZCBzb2NpYWwgcXVlIHBlcm1pdGUgY29ub2NlciBnZW50ZSBjZXJjYW5hIGEgdGkgZGUgdHVzIG1pc21hcyBhZmljaW9uZXMgZnJpa2lzLiBFbCBwcm95ZWN0byB0aWVuZSBtdWNob3MgYXNwZWN0b3MgbWVqb3JhYmxlcywgcGVybyBhY2FiYSByZXN1bHRhbmRvIHVuYSBleHBlcmllbmNpYSBtdXkgZW5yaXF1ZWNlZG9yYS48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgPHN0cm9uZz4yMDEyOjwvc3Ryb25nPiBcclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5OcIEZpbmFsaXpvIGxhIEVkdWNhY2nDs24gU2VjdW5kYXJpYSBPYmxpZ2F0b3JpYS48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5Go4oCN8J+OkyBFbXBpZXpvIGEgY3Vyc2FyIGVsIEdyYWRvIE1lZGlvIGVuIFNpc3RlbWFzIE1pY3JvaW5mb3Jtw6F0aWNvcyB5IFJlZGVzLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICA8c3Ryb25nPjIwMTE6PC9zdHJvbmc+IFxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgPGxpPvCfjq4gQ29sYWJvcm8gZW4gZWwgZGVzYXJyb2xsbyBkZSB1bmEgYWRhcHRhY2nDs24gZGVsIGVtdWxhZG9yIDxhIGhyZWY9XCJodHRwczovL3JhdGhlbmEub3JnL1wiIHRhcmdldD1cIl9ibGFua1wiPnJBdGhlbmE8L2E+IHBhcmEgY3JlYXIgdW4ganVlZ28gZGUgcm9sLiBBcHJlbmRvIGFzcGVjdG9zIGLDoXNpY29zIGRlIE15U1FMLCBQSFAgeSBhZG1pbmlzdHJhY2nDs24gZGUgc2Vydmlkb3JlcyBncmFjaWFzIGFsIHJlc3RvIGRlIHBhcnTDrWNpcGVzIGRlbCBwcm95ZWN0bywgcXVlIGRlZGljYW4gbXVjaG8gdGllbXBvIGEgZW5zZcOxYXJtZSB5IGNvbXBhcnRpciBzdSBjb25vY2ltaWVudG8uPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+PHN0cm9uZz4yMDA5Ojwvc3Ryb25nPiBcclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7wn4+04oCN4pig77iP4oCNIFZlbyBQaXJhdGFzIGRlIFNpbGljb24gVmFsbGV5IHBvciBwcmltZXJhIHZlei48L2xpPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5GB77iPIFVuIGNvbGVnYSBkZSBtaSBoZXJtYW5vIG1lIGVuc2XDsWEgRXllT1MgeSBtZSBoYWdvIGZhbiBkZWwgcHJveWVjdG8uPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+MjAwNjo8L3N0cm9uZz5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7wn5al77iPIE1pcyBwYWRyZXMgY29tcHJhbiB1biBudWV2byBvcmRlbmFkb3IuIEVtcGllem8gYSBpbnN0YWxhciBwcm9ncmFtYXMgcXVlIHBydWVibyBpbmRpc2NyaW1pbmFkYW1lbnRlIGVuIFNvZnRvbmljLjwvbGk+XHJcbiAgICAgICAgICAgICAgPGxpPvCfk6EgRWwgSW50ZXJuZXQgbGxlZ2EgYSBjYXNhIGdyYWNpYXMgYWwgQURTTCBkZSBXYW5hZG9vLiBVdGlsaXphbW9zIHByb2dyYW1hcyBQMlAgcGFyYSBkZXNjYXJnYXIgbcO6c2ljYSwgbnVlc3RyYSByYXRpbyBkZSBkZXNjYXJnYSBlcyBkZSB1bmEgY2FuY2nDs24gY2FkYSBjdWF0cm8gaG9yYXMuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+SrCBXaW5kb3dzIExpdmUgTWVzc2VuZ2VyIHNlIGNvbnZpZXJ0ZSBlbiBlbCBXaGF0c2FwcCBkZSBsYSDDqXBvY2EgKHBlcm8gc2luIHNlciBwb3J0w6F0aWwsIHkgc8OzbG8gcG9yIGxhcyB0YXJkZXMpIHBhcmEgbGEgbWF5b3LDrWEgZGUgY29tcGHDsWVyb3MgZGUgY2xhc2UuPC9saT5cclxuICAgICAgICAgICAgICA8bGk+8J+UhCBNaWNyb3NvZnQgbGliZXJhIFdpbmRvd3MgVmlzdGEuIE1lIGxhcyBhcGHDsW8gcGFyYSBkZXNjYXJnYXJsbyBwb3IgUDJQLCB5IGFsIGxvZ3JhciBpbnN0YWxhcmxvIChwYXJhIGRpc2d1c3RvIGRlIG1pcyBwYWRyZXMpIGRlam8gaW5zZXJ2aWJsZSBlbCBQQyBwb3IgZmFsdGEgZGUgZHJpdmVycy4gQ29uc2lnbyByZXBhcmFybG8gZW4gYWxnw7puIG1vbWVudG8gdXRpbGl6YW5kbyBsb3MgZGlzY29zIGRlIHJlc3RhdXJhY2nDs24uPC9saT5cclxuICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+MjAwMjo8L3N0cm9uZz5cclxuICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgIDxsaT7wn46uIFBhc28gbGFzIHRhcmRlcyBjb24gbWkgaGVybWFubzogVmVvIGxhIGhpc3RvcmlhIGRlIGxvcyBaZWxkYXMgYSB0cmF2w6lzIGRlIGxhcyBwYXJ0aWRhcyBkZSBtaSBoZXJtYW5vLCB2ZW1vcyBlbCBLMyBlbiBjYXNhIGRlIG51ZXN0cmEgYWJ1ZWxhIPCfkbUsIG8gc2FsaW1vcyBhIGRhciB2dWVsdGFzIGNvbiBsb3MgcGF0aW5ldGVzIGRlIGxhIMOpcG9jYS48L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgPC9saT5cclxuICAgICAgICAgIDxsaT48c3Ryb25nPjE5OTY6PC9zdHJvbmc+IFxyXG4gICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgPGxpPvCfkbYgTmF6Y28gYSBtZWRpYWRvcyBkZSBhYnJpbCBlbiBUZXJyYXNzYSwgQmFyY2Vsb25hLjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgIDwvdWw+XHJcbiAgICAgIDwvQ29udGVudD5cclxuICAgIDwvQ29udGFpbmVyPlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoUG9zdCk7XHJcblxyXG5jb25zdCBTbWFsbFRleHQgPSBzdHlsZWQucGBcclxuICBmb250LXNpemU6IDEwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIHdpZHRoOiA4MDBweDtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMjRweDtcclxuYDtcclxuXHJcbmNvbnN0IEJhZGdlID0gc3R5bGVkLmltZ2BcclxuICAgIG1heC13aWR0aDogNTAlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDI1JSAhaW1wb3J0YW50O1xyXG5gO1xyXG5cclxuY29uc3QgU2xpZGVzaG93ICA9IHN0eWxlZC5kaXZgXHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgbWF4LXdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogMTEwcHg7XHJcbiAgbWF4LWhlaWdodDogMTEwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBNYXJxdWVlID0gc3R5bGVkLmRpdmBcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgbGVmdDogMDtcclxuICB0b3A6IDA7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIHdpZHRoOiA1MDAwcHg7XHJcbiAgbWF4LXdpZHRoOiA1MDAwcHg7XHJcbiAgYW5pbWF0aW9uOiBzbGlkZXNob3cgMTBzIGxpbmVhciBpbmZpbml0ZTtcclxuYDtcclxuXHJcbmNvbnN0IE1hcnF1ZWVMb2dvID0gc3R5bGVkLmltZ2BcclxuICAgIGRpc3BsYXk6IGlubGluZSAhaW1wb3J0YW50O1xyXG4gICAgbWF4LXdpZHRoOiAxMDBweDtcclxuICAgIHdpZHRoOiAxMDBweDtcclxuICAgIG1hcmdpbi1yaWdodDogY2FsYygyMHB4KSAhaW1wb3J0YW50O1xyXG5gO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgY29tcG9uZW50IGlzIHRoZSBwYXJlbnQgb2YgdGhlIGBjb250ZW50LnJlbmRlcmVkYCBIVE1MLiBXZSBjYW4gdXNlIG5lc3RlZFxyXG4gKiBzZWxlY3RvcnMgdG8gc3R5bGUgdGhhdCBIVE1MLlxyXG4gKi9cclxuY29uc3QgQ29udGVudCA9IHN0eWxlZC5kaXZgXHJcbiAgY29sb3I6IHJnYmEoMTIsIDE3LCA0MywgMC44KTtcclxuICB3b3JkLWJyZWFrOiBicmVhay13b3JkO1xyXG5cclxuICAqIHtcclxuICAgIG1heC13aWR0aDogMTAwJTtcclxuICB9XHJcblxyXG4gIHAge1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuNmVtO1xyXG4gIH1cclxuXHJcbiAgaW1nIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgb2JqZWN0LWZpdDogY292ZXI7XHJcbiAgICBvYmplY3QtcG9zaXRpb246IGNlbnRlcjtcclxuICB9XHJcblxyXG4gIGZpZ3VyZSB7XHJcbiAgICBtYXJnaW46IDI0cHggYXV0bztcclxuICAgIC8qIG5leHQgbGluZSBvdmVycmlkZXMgYW4gaW5saW5lIHN0eWxlIG9mIHRoZSBmaWd1cmUgZWxlbWVudC4gKi9cclxuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XHJcblxyXG4gICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgIGZvbnQtc2l6ZTogMC43ZW07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZnJhbWUge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBtYXJnaW46IGF1dG87XHJcbiAgfVxyXG5cclxuICBibG9ja3F1b3RlIHtcclxuICAgIG1hcmdpbjogMTZweCAwO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xyXG4gICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCByZ2JhKDEyLCAxNywgNDMpO1xyXG4gICAgcGFkZGluZzogNHB4IDE2cHg7XHJcbiAgfVxyXG5cclxuICBhIHtcclxuICAgIGNvbG9yOiByZ2IoMjM5LCAxOTAsIDApICFpbXBvcnRhbnQ7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB9XHJcblxyXG4gIGE6aG92ZXJ7XHJcbiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgcmdiKDIzOSwgMTkwLCAwKTtcclxuICB9XHJcblxyXG4gIGEubm8tYm9yZGVye1xyXG4gICAgYm9yZGVyLWJvdHRvbTogbm9uZSAhaW1wb3J0YW50O1xyXG4gIH1cclxuXHJcbiAgLyogSW5wdXQgZmllbGRzIHN0eWxlcyAqL1xyXG5cclxuICBpbnB1dFt0eXBlPVwidGV4dFwiXSxcclxuICBpbnB1dFt0eXBlPVwiZW1haWxcIl0sXHJcbiAgaW5wdXRbdHlwZT1cInVybFwiXSxcclxuICBpbnB1dFt0eXBlPVwidGVsXCJdLFxyXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl0sXHJcbiAgaW5wdXRbdHlwZT1cImRhdGVcIl0sXHJcbiAgdGV4dGFyZWEsXHJcbiAgc2VsZWN0IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgcGFkZGluZzogNnB4IDEycHg7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgbGluZS1oZWlnaHQ6IDEuNTtcclxuICAgIGNvbG9yOiAjNDk1MDU3O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcclxuICAgIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2VkNGRhO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgb3V0bGluZS1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICB0cmFuc2l0aW9uOiBvdXRsaW5lLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IDAuMTVzIGVhc2UtaW4tb3V0O1xyXG4gICAgbWFyZ2luOiA4cHggMCA0cHggMDtcclxuXHJcbiAgICAmOmZvY3VzIHtcclxuICAgICAgb3V0bGluZS1jb2xvcjogIzFmMzhjNTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgIC1tcy10b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcclxuICAgIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICMxZjM4YzU7XHJcbiAgICBwYWRkaW5nOiAxMnB4IDM2cHg7XHJcbiAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICBsaW5lLWhlaWdodDogMS40Mjg1NzE0MztcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFmMzhjNTtcclxuICB9XHJcblxyXG4gIC8qIFdvcmRQcmVzcyBDb3JlIEFsaWduIENsYXNzZXMgKi9cclxuXHJcbiAgQG1lZGlhIChtaW4td2lkdGg6IDQyMHB4KSB7XHJcbiAgICBpbWcuYWxpZ25jZW50ZXIsXHJcbiAgICBpbWcuYWxpZ25sZWZ0LFxyXG4gICAgaW1nLmFsaWducmlnaHQge1xyXG4gICAgICB3aWR0aDogYXV0bztcclxuICAgIH1cclxuXHJcbiAgICAuYWxpZ25jZW50ZXIge1xyXG4gICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcclxuICAgIH1cclxuXHJcbiAgICAuYWxpZ25yaWdodCB7XHJcbiAgICAgIGZsb2F0OiByaWdodDtcclxuICAgICAgbWFyZ2luLWxlZnQ6IDI0cHg7XHJcbiAgICB9XHJcblxyXG4gICAgLmFsaWdubGVmdCB7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDI0cHg7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/about.js\n");

/***/ })

})