webpackHotUpdate("oriol-im",{

/***/ "./packages/mars-theme/src/components/contact.js":
/*!*******************************************************!*\
  !*** ./packages/mars-theme/src/components/contact.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./list */ \"./packages/mars-theme/src/components/list/index.js\");\n/* harmony import */ var _reading_progress__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../reading-progress */ \"./packages/reading-progress/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_spinners_ScaleLoader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-spinners/ScaleLoader */ \"./node_modules/react-spinners/ScaleLoader.js\");\n/* harmony import */ var react_spinners_ScaleLoader__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_spinners_ScaleLoader__WEBPACK_IMPORTED_MODULE_7__);\nfunction asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,\"next\",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,\"throw\",err);}_next(undefined);});};}function _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"1q7njkh\",styles:\"margin-top:10px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"gx0lhm\",styles:\"margin-bottom:0;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"1xaekgw\",styles:\"margin-top:20px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var Post=(_ref4)=>{var{state,actions,libraries}=_ref4;//Datos del formulario\nvar[name,setName]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[email,setEmail]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[message,setMessage]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[checkField,setCheckField]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[legalCheck,setLegalCheck]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(false);//Control de errores\nvar[nameError,setNameError]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[legalError,setLegalError]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[emailError,setEmailError]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");var[messageError,setMessageError]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(\"\");//Estado\nvar[messageStatus,setMessageStatus]=Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(0);/**\r\n   * Once the post has loaded in the DOM, prefetch both the\r\n   * home posts and the list component so if the user visits\r\n   * the home page, everything is ready and it loads instantly.\r\n   */Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(()=>{actions.source.fetch(\"/\");_list__WEBPACK_IMPORTED_MODULE_4__[\"default\"].preload();//Prismjs to highlight code snippets\nif(Prism!==undefined){Prism.highlightAll();}},[]);var validateEmail=email=>{var re=/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;return re.test(String(email).toLowerCase());};var onContact=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(function*(event){event.preventDefault();var hasErrors=false;//Si no hemos aceptado los textos legales, tenemos error\nif(legalCheck===false){hasErrors=true;setLegalError(\"Debes aceptar las condiciones legales y de privacidad.\");}else{setLegalError(\"\");}//El nombre es obligatorio y ha de tener entre 5 y 30 caracteres\nif(name.length<1){hasErrors=true;setNameError(\"Este campo es obligatorio.\");}else if(name.length>30){hasErrors=true;setNameError(\"El nombre no puede ser mayor a 30 caracteres.\");}else{setNameError(\"\");}//El email es obligatorio y ha de tener el formato de un e-mail correcto\nif(email.length<1){hasErrors=true;setEmailError(\"Este campo es obligatorio.\");}else if(!validateEmail(email)){hasErrors=true;setEmailError(\"El e-mail introducido no es válido.\");}else{setEmailError(\"\");}//Por último, el mensaje de contacto ha de tener al menos diez caracteres\nif(message.length<10){hasErrors=true;setMessageError(\"El mensaje debe tener al menos 10 caracteres.\");}else{setMessageError(\"\");}//Si no ha habido errores, enviamos\nif(hasErrors===false){setMessageStatus(1);yield axios__WEBPACK_IMPORTED_MODULE_6___default()({method:'post',url:'https://wp.oriol.im/contact-form/index.php',data:{name,email,message,checkField,legalCheck}});setMessageStatus(2);}});return function onContact(_x){return _ref5.apply(this,arguments);};}();var renderForm=()=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"h1\",null,\"Hablemos\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Tanto si quieres preguntarme algo, charlar un rato, compartir algo interesante, o proponerme un nuevo proyecto, puedes utilizar este formulario de contacto para contactar conmigo.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Intentar\\xE9 en todo caso dar respuesta a todos los mensajes recibidos, siempre y cuando sean relevantes y respetuosos. Pero por favor, ten en cuenta que todo ello depende de mi tiempo libre y excepcionalmente las respuestas pueden demorarse.\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",null,\"Recuerda que tambi\\xE9n puedes encontrarme en Twitter bajo el nombre de \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{href:\"https://www.twitter.com/OriolEgea\",target:\"_blank\"},\"@OriolEgea\"),\".\"),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"form\",{onSubmit:onContact,autoComplete:\"off\",method:\"POST\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Field,{type:\"text\",name:\"name\",id:\"name\",placeholder:\"Name\",value:checkField,onChange:e=>setCheckField(e.target.value)}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-grid\",{columns:\"8\",css:_ref},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(ShortInput,{type:\"text\",name:\"f$01\",id:\"f$01\",placeholder:\"Nombre\",value:name,onChange:e=>setName(e.target.value)}),nameError.length>0&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(FormError,null,nameError)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"r-cell\",{span:\"4\",\"span-s\":\"row\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(ShortInput,{type:\"text\",name:\"honeypot\",id:\"honeypot\",placeholder:\"Correo electr\\xF3nico\",value:email,onChange:e=>setEmail(e.target.value)}),emailError.length>0&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(FormError,null,emailError))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(FullWidthTextarea,{name:\"f$03\",id:\"f$03\",rows:\"7\",placeholder:\"Escribe aqu\\xED tu mensaje\",value:message,onChange:e=>setMessage(e.target.value)}),messageError.length>0&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(FormError,null,messageError),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"p\",{css:_ref2},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"input\",{type:\"checkbox\",checked:legalCheck,onChange:()=>{setLegalCheck(!legalCheck);setLegalError(\"\");}}),\"He le\\xEDdo la \",Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"a\",{target:\"_blank\",href:\"/politica-de-privacidad/\"},\"pol\\xEDtica de privacidad\"),\" y acepto que mis datos sean tratados con la \\xFAnica finalidad de dar respuesta a mi mensaje por correo electr\\xF3nico.\"),legalError.length>0&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(FormError,null,legalError),messageStatus==0&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"input\",{css:_ref3,type:\"submit\",value:\"Enviar\"}),messageStatus==1&&Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react_spinners_ScaleLoader__WEBPACK_IMPORTED_MODULE_7___default.a,{color:\"rgba(12, 17, 43, 0.3)\",radius:0,margin:\"3px\",width:4,height:24})));};var renderThanks=()=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null);};return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(_reading_progress__WEBPACK_IMPORTED_MODULE_5__[\"default\"],null),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Container,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Content,null,(messageStatus==0||messageStatus==1)&&renderForm(),messageStatus==2&&renderThanks())));};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Post));var FormError=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",{target:\"e1spo1rl0\",label:\"FormError\"})( false?undefined:{name:\"1vg57o8\",styles:\"color:red;font-size:10px;margin-top:0px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Field=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"input\",{target:\"e1spo1rl1\",label:\"Field\"})( false?undefined:{name:\"116j82x\",styles:\"opacity:0;position:fixed;bottom:0;z-index:0;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var ShortInput=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"input\",{target:\"e1spo1rl2\",label:\"ShortInput\"})( false?undefined:{name:\"l0ofq7\",styles:\"width:calc(100% - 30px);font-family:inherit;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var FullWidthTextarea=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"textarea\",{target:\"e1spo1rl3\",label:\"FullWidthTextarea\"})( false?undefined:{name:\"31zy1d\",styles:\"max-width:calc(100% - 30px);width:calc(100% - 30px);margin-bottom:20px !important;font-family:inherit;resize:none;z-index:1;margin-bottom:3px !important;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1spo1rl4\",label:\"Container\"})( false?undefined:{name:\"ozz26u\",styles:\"width:800px;margin:0;padding:24px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/**\r\n * This component is the parent of the `content.rendered` HTML. We can use nested\r\n * selectors to style that HTML.\r\n */var Content=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e1spo1rl5\",label:\"Content\"})( false?undefined:{name:\"1typw6i\",styles:\"color:rgba(12,17,43,0.8);word-break:break-word;*{max-width:100%;}p{line-height:1.6em;}img{width:100%;object-fit:cover;object-position:center;}figure{margin:24px auto;width:100% !important;figcaption{font-size:0.7em;}}iframe{display:block;margin:auto;}blockquote{margin:16px 0;background-color:rgba(0,0,0,0.1);border-left:4px solid rgba(12,17,43);padding:4px 16px;}a{color:rgb(239,190,0) !important;font-weight:bold;text-decoration:none;}a:hover{border-bottom:2px solid rgb(239,190,0);}a.no-border{border-bottom:none !important;}input[type=\\\"text\\\"],input[type=\\\"email\\\"],input[type=\\\"url\\\"],input[type=\\\"tel\\\"],input[type=\\\"number\\\"],input[type=\\\"date\\\"],textarea,select{display:block;padding:6px 12px;font-size:16px;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:4px;outline-color:transparent;transition:outline-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;margin:8px 0 4px 0;&:focus{outline-color:#1f38c5;}}input[type=\\\"submit\\\"]{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid #fccb0b;padding:12px 36px;font-size:14px;line-height:1.42857143;border-radius:4px;color:#fff;background-color:#fccb0b;font-weight:bold;}@media (min-width:420px){img.aligncenter,img.alignleft,img.alignright{width:auto;}.aligncenter{display:block;margin-left:auto;margin-right:auto;}.alignright{float:right;margin-left:24px;}.alignleft{float:left;margin-right:24px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/contact.js\n");

/***/ })

})